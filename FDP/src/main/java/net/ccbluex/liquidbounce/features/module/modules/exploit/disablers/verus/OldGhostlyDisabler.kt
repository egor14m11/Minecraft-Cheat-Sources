package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.concurrent.LinkedBlockingQueue
import kotlin.math.roundToInt

class OldGhostlyDisabler : DisablerMode("OldGhostly") {

    private val packets = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    
    override fun onEnable() {

        packets.clear()
    }
    override fun onWorld(event: WorldEvent) {
        packets.clear()
    }

    override fun onUpdate(event: UpdateEvent) {
        if (mc.thePlayer.ticksExisted % 15 == 0) {
            while (!packets.isEmpty()) {
                PacketUtils.sendPacketNoEvent(packets.take())
            }
        }
    }
    
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) packets.clear()
        
        if(packet is C0FPacketConfirmTransaction) {
            packets.add(packet as Packet<INetHandlerPlayServer>)
            event.cancelEvent()
        }

        if(packet is C00PacketKeepAlive){
            packets.add(packet as Packet<INetHandlerPlayServer>)
            event.cancelEvent()
        }

        if(packet is C03PacketPlayer){
            if(mc.thePlayer.ticksExisted % 10 == 0){
                event.cancelEvent()
            }
            val yPos = (mc.thePlayer.posY / 0.015625).roundToInt() * 0.015625
            mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)
            
        }

    }
}
