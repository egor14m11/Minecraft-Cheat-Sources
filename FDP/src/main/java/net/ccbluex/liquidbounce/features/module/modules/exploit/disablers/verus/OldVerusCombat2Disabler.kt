package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0CPacketInput
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.*

class OldVerusCombat2Disabler : DisablerMode("OldVerusCombat2") {
    private var currentTrans = 0
    private var verus2Stat = false
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    override fun onEnable() {
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
    }
    override fun onWorld(event: WorldEvent) {
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
    }

    override fun onUpdate(event: UpdateEvent) {
        mc.timer.timerSpeed = 0.6F
        if (mc.thePlayer.ticksExisted % 50 == 0 && (packetBuffer.size - 1) > currentTrans) {
            verus2Stat = true
            PacketUtils.sendPacketNoEvent(packetBuffer[++currentTrans])
            disabler.debugMessage("Send Trans")
        }
        if (mc.thePlayer.ticksExisted % 500 == 0) {
            packetBuffer.clear()
            disabler.debugMessage("Clear Trans")
            currentTrans = 0
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C0FPacketConfirmTransaction) {
            if (!verus2Stat) {
                packetBuffer.add(packet)
                disabler.debugMessage("Add Packet C0F")
                event.cancelEvent()
            } else {
                verus2Stat = false
            }
        } else if (packet is C00PacketKeepAlive) {
            PacketUtils.sendPacketNoEvent(C00PacketKeepAlive(RandomUtils.nextInt(1, 2147483647)))
            disabler.debugMessage("Packet C00")
            event.cancelEvent()
        } else if (packet is C03PacketPlayer) {
            PacketUtils.sendPacketNoEvent(C0CPacketInput())
            if (mc.thePlayer.ticksExisted % 15 == 0) {
                packet.y += RandomUtils.nextInt(100, 1000)
                disabler.debugMessage("Packet C03")
            }
        }
    }
}