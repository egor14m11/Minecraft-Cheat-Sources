package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import java.util.*
import kotlin.math.pow
import kotlin.math.roundToInt

class OldMatrixDisabler : DisablerMode("OldMatrix") {
    private val memeAACValue = BoolValue("${valuePrefix}OldMatrixWithAAC5", false)
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var memeTick = 0
    override fun onEnable() {
        memeTick = 0
        packetBuffer.clear()
    }
    override fun onDisable() {
        for (packet in packetBuffer) {
            PacketUtils.sendPacketNoEvent(packet)
        }
        packetBuffer.clear()
    }

    override fun onWorld(event: WorldEvent) {
        memeTick = 0
        packetBuffer.clear()
    }

    override fun onUpdate(event: UpdateEvent) {
        memeTick++
        val cTick = if (memeAACValue.get()) {
            (mc.timer.timerSpeed.toDouble().pow(2.0) * 10).roundToInt()
        } else {
            (mc.timer.timerSpeed.toDouble().pow(2.0) * 7.6).roundToInt()
        }
        if (memeTick >= cTick) {
            memeTick = 0
            for (packet in packetBuffer) {
                PacketUtils.sendPacketNoEvent(packet)
            }

            disabler.debugMessage("Release buf(size=${packetBuffer.size}, cTick=$cTick)")
            packetBuffer.clear()
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C03PacketPlayer && !(packet is C03PacketPlayer.C04PacketPlayerPosition ||packet is C03PacketPlayer.C05PacketPlayerLook ||packet is C03PacketPlayer.C06PacketPlayerPosLook)) {
            event.cancelEvent()
        }
        if (packet is C02PacketUseEntity || packet is C03PacketPlayer.C04PacketPlayerPosition || packet is C03PacketPlayer.C05PacketPlayerLook ||
            packet is C03PacketPlayer.C06PacketPlayerPosLook || packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement ||
            packet is C0APacketAnimation || packet is C0BPacketEntityAction
        ) {
            event.cancelEvent()
            packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
        }
    }
}