package zamorozka.modules.EXPLOITS;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

import org.lwjgl.input.Keyboard;

import de.Hero.settings.Setting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketClientStatus;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayer.PositionRotation;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketKeepAlive;
import optifine.MathUtils;
import zamorozka.event.EventManager;
import zamorozka.event.EventTarget;
import zamorozka.event.events.EventPacket;
import zamorozka.event.events.EventPacketReceive;
import zamorozka.event.events.EventPacketSend;
import zamorozka.event.events.EventPostMotionUpdates;
import zamorozka.event.events.EventPreMotionUpdates;
import zamorozka.event.events.EventReceivePacket;
import zamorozka.event.events.EventSendPacket;
import zamorozka.event.events.EventUpdate;
import zamorozka.event.events.PacketEvent;
import zamorozka.main.Zamorozka;
import zamorozka.module.Category;
import zamorozka.module.Module;
import zamorozka.ui.MathUtil;
import zamorozka.ui.TimeHelper;
import zamorozka.ui.TimerHelper;
import zamorozka.ui.TimerUtils;
import zamorozka.ui.TimerrUtil;
import zamorozka.ui.Wrapper;

public class PingSpoof extends Module {

	/*
	 * ping spoof by Maximus_
	 */

	long id;
	short tsid;
	int twid;
	int ticks;

	@Override
	public void setup() {
		Zamorozka.settingsManager.rSetting(new Setting("DisableDelay", this, 25000, 50, 30000, true));
	}

	public PingSpoof() {
		super("PingSpoof", 0, Category.Exploits);
	}

	@EventTarget
	public void onSend(EventSendPacket event) {
		long delay = (long) Zamorozka.settingsManager.getSettingByName("DisableDelay").getValDouble();
		this.setDisplayName("AntiCheatDisabler §f" + "Delay: " + (int) delay);
		if (!mc.isSingleplayer()) {
			if (event.getPacket() instanceof CPacketConfirmTransaction) {
				if (tsid == ((CPacketConfirmTransaction) event.getPacket()).getUid()
						&& twid == ((CPacketConfirmTransaction) event.getPacket()).getWindowId())
					return;
				event.setCancelled(true);
				new Thread(() -> {
					try {
						Thread.sleep(delay);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					tsid = ((CPacketConfirmTransaction) event.getPacket()).getUid();
					twid = ((CPacketConfirmTransaction) event.getPacket()).getWindowId();
					if (mc.player == null)
						return;
					if (mc.player.connection == null)
						return;
					mc.player.connection.sendPacket(event.getPacket());

				}).start();
			}

			if (event.getPacket() instanceof CPacketKeepAlive) {
				if (id == ((CPacketKeepAlive) event.getPacket()).getKey())
					return;
				event.setCancelled(true);
				new Thread(() -> {
					try {
						Thread.sleep(delay);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					id = ((CPacketKeepAlive) event.getPacket()).getKey();
					mc.player.connection.sendPacket(event.getPacket());
				}).start();
			}
		}
	}
}