package zamorozka.modules.EXPLOITS;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Comparator;

import org.lwjgl.opengl.GL11;

import com.mojang.realmsclient.gui.ChatFormatting;

import de.Hero.settings.Setting;
import net.minecraft.block.Block;
import net.minecraft.block.BlockCrops;
import net.minecraft.block.BlockDoublePlant;
import net.minecraft.block.BlockFlower;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.BlockTallGrass;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialLiquid;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.gui.GuiIngame;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.server.SPacketBlockAction;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.network.play.server.SPacketMultiBlockChange;
import net.minecraft.network.play.server.SPacketMultiBlockChange.BlockUpdateData;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import zamorozka.event.EventTarget;
import zamorozka.event.events.EventPacket;
import zamorozka.event.events.EventPreMotion;
import zamorozka.event.events.EventPreMotionUpdates;
import zamorozka.event.events.EventRender3D;
import zamorozka.event.events.RenderEvent3D;
import zamorozka.gui.GuiIngameHook;
import zamorozka.main.Zamorozka;
import zamorozka.module.Category;
import zamorozka.module.Module;
import zamorozka.notification.NotificationPublisher;
import zamorozka.notification.NotificationType;
import zamorozka.ui.BlockUtil;
import zamorozka.ui.BlockUtilis;
import zamorozka.ui.ChatUtils;
import zamorozka.ui.Colors;
import zamorozka.ui.ColorsUtil;
import zamorozka.ui.EntityUtil;
import zamorozka.ui.PlayerUtil;
import zamorozka.ui.RenderUtils;
import zamorozka.ui.RenderUtils2;
import zamorozka.ui.RenderingTools;
import zamorozka.ui.RenderingUtils;

public class XrauBiposs extends Module {

	public XrauBiposs() {
		super("XrayBypass", 0, Category.Exploits);
	}

	@Override
	public void setup() {
		ArrayList<String> options = new ArrayList<>();
		options.add("FullBox");
		options.add("Frame");
		Zamorozka.instance.settingsManager.rSetting(new Setting("BlockOutline Mode", this, "FullBox", options));
		Zamorozka.settingsManager.rSetting(new Setting("DiamondCheck", this, true));
		Zamorozka.settingsManager.rSetting(new Setting("GoldCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("IronCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("EmeraldCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("RedstoneCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("LapisCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("CoalCheck", this, false));
		Zamorozka.settingsManager.rSetting(new Setting("CheckSpeed", this, 4, 1, 5, true));
		Zamorozka.settingsManager.rSetting(new Setting("Radius XZ", this, 20, 5, 200, true));
		Zamorozka.settingsManager.rSetting(new Setting("Radius Y", this, 6, 2, 50, true));
	}

	ArrayList<BlockPos> ores = new ArrayList<>();
	ArrayList<BlockPos> toCheck = new ArrayList<>();
	public static int done;
	public static int all;

	@Override
	public void onEnable() {
		NotificationPublisher.queue("Module", "XrayBypass was Enabled!", NotificationType.INFO);
		ores.clear();
		toCheck.clear();

		int radXZ = (int) Zamorozka.settingsManager.getSettingByName("Radius XZ").getValDouble();
		int radY = (int) Zamorozka.settingsManager.getSettingByName("Radius Y").getValDouble();
		ArrayList<BlockPos> blockPositions = getBlocks(radXZ, radY, radXZ);

		for (BlockPos pos : blockPositions) {
			IBlockState state = BlockUtil.getState(pos);
			if (isCheckableOre(Block.getIdFromBlock(state.getBlock()))) {
				toCheck.add(pos);
			}
		}

		all = toCheck.size();
		done = 0;
		super.onEnable();
	}

	@Override
	public void onDisable() {
		NotificationPublisher.queue("Module", "XrayBypass was Disabled!", NotificationType.INFO);
		mc.getMinecraft().renderGlobal.loadRenderers();
		super.onDisable();
	}

	@EventTarget
	public void onUpdate(EventPreMotionUpdates e) {
		this.setDisplayName("XrayBypass §f§" + " Gay Sex");
		/*
		 * if
		 * (Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean())
		 * {
		 * Zamorozka.settingsManager.getSettingByName("GoldCheck").setValBoolean(false);
		 * } if
		 * (Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("DiamondCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("GoldCheck").setValBoolean(false);
		 * } if
		 * (Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("IronCheck").setValBoolean(false);
		 * } if
		 * (Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean())
		 * {
		 * Zamorozka.settingsManager.getSettingByName("IronCheck").setValBoolean(false);
		 * } if
		 * (Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("DiamondCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("EmeraldCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean())
		 * {
		 * Zamorozka.settingsManager.getSettingByName("IronCheck").setValBoolean(false);
		 * } if
		 * (Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean())
		 * { Zamorozka.settingsManager.getSettingByName("DiamondCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean())
		 * { Zamorozka.settingsManager.getSettingByName("EmeraldCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean()) {
		 * Zamorozka.settingsManager.getSettingByName("EmeraldCheck").setValBoolean(
		 * false); } if
		 * (Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean())
		 * {
		 * Zamorozka.settingsManager.getSettingByName("GoldCheck").setValBoolean(false);
		 * }
		 */
		if (toCheck.size() > 0) {
			if (done % 200 == 0) {

				/*
				 * ChatUtils.printChatprefix("XrayBypass: " + "Done - " + done + " / " +
				 * "All - " + all);
				 * 
				 * 
				 * ChatUtils.printChatprefix("XrayBypass: " + ChatFormatting.GREEN + "Done - " +
				 * ChatFormatting.RESET + done + " / " + ChatFormatting.RED + "All - " +
				 * ChatFormatting.RESET + all);
				 */

			}
			double spd = Zamorozka.settingsManager.getSettingByName("CheckSpeed").getValDouble();
			for (int i = 0; i < (int) spd; i++) {
				if (toCheck.size() < 1)
					return;
				BlockPos pos = toCheck.remove(0);
				done++;
				mc.getConnection().sendPacket(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, pos, EnumFacing.UP));
			}
		}
	}

	private boolean isCheckableOre(int id) {
		int check = 0;
		int check1 = 0;
		int check2 = 0;
		int check3 = 0;
		int check4 = 0;
		int check5 = 0;
		int check6 = 0;
		if (Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean() && id != 0) {
			check = 56;
		}
		if (Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean() && id != 0) {
			check1 = 14;
		}
		if (Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean() && id != 0) {
			check2 = 15;
		}
		if (Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean() && id != 0) {
			check3 = 129;
		}
		if (Zamorozka.settingsManager.getSettingByName("RedstoneCheck").getValBoolean() && id != 0) {
			check4 = 73;
		}
		if (Zamorozka.settingsManager.getSettingByName("CoalCheck").getValBoolean() && id != 0) {
			check5 = 16;
		}
		if (Zamorozka.settingsManager.getSettingByName("LapisCheck").getValBoolean() && id != 0) {
			check6 = 21;
		}
		if (id == 0) {
			return false;
		}
		return id == check || id == check1 || id == check2 || id == check3 || id == check4 || id == check5 || id == check6;
	}

	private boolean isEnabledOre(int id) {
		int check = 0;
		int check1 = 0;
		int check2 = 0;
		int check3 = 0;
		int check4 = 0;
		int check5 = 0;
		int check6 = 0;
		if (Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean() && id != 0) {
			check = 56;
		}
		if (Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean() && id != 0) {
			check1 = 14;
		}
		if (Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean() && id != 0) {
			check2 = 15;
		}
		if (Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean() && id != 0) {
			check3 = 129;
		}
		if (Zamorozka.settingsManager.getSettingByName("RedstoneCheck").getValBoolean() && id != 0) {
			check4 = 73;
		}
		if (Zamorozka.settingsManager.getSettingByName("CoalCheck").getValBoolean() && id != 0) {
			check5 = 16;
		}
		if (Zamorozka.settingsManager.getSettingByName("LapisCheck").getValBoolean() && id != 0) {
			check6 = 21;
		}
		if (id == 0) {
			return false;
		}
		return id == check || id == check1 || id == check2 || id == check3 || id == check4 || id == check5 || id == check6;
	}

	@EventTarget
	public void onReceivePacket(EventPacket e) {
		if (e.getPacket() instanceof SPacketBlockChange) {
			SPacketBlockChange p = (SPacketBlockChange) e.getPacket();

			if (isEnabledOre(Block.getIdFromBlock(p.getBlockState().getBlock()))) {
				ores.add(p.getBlockPosition());
				/*
				 * if (isEnabledOre(56) &&
				 * Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean()) {
				 * 
				 * ChatUtils.printChatprefix("Diamonds were found on: " + ChatFormatting.RED +
				 * "X: " + ChatFormatting.GREEN + p.getBlockPosition().getX() +
				 * ChatFormatting.RED + " Y: " + ChatFormatting.GREEN +
				 * p.getBlockPosition().getY() + ChatFormatting.RED + " Z: " +
				 * ChatFormatting.GREEN + p.getBlockPosition().getZ());
				 * NotificationPublisher.queue("XrayBypass", "Diamond was found!",
				 * NotificationType.SUCCESS); }
				 */

			}
		} else if (e.getPacket() instanceof SPacketMultiBlockChange) {
			SPacketMultiBlockChange p = (SPacketMultiBlockChange) e.getPacket();

			for (BlockUpdateData dat : p.getChangedBlocks()) {
				if (isEnabledOre(Block.getIdFromBlock(dat.getBlockState().getBlock()))) {
					ores.add(dat.getPos());

				}
			}
		}
	}

	@EventTarget
	public void onRender(EventRender3D event) {
		for (BlockPos pos : ores) {
			IBlockState state = BlockUtil.getState(pos);
			Block mat = state.getBlock();
			String mode = Zamorozka.settingsManager.getSettingByName("BlockOutline Mode").getValString();
			if (mode.equalsIgnoreCase("FullBox")) {
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 56 && Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 56) {
						// RenderUtils.drawboxESP5(pos, new Color(0, 255, 255, 100));
						RenderUtils2.blockEsp(pos, new Color(0, 255, 255, 50), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 14 && Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 14) {
						RenderUtils2.blockEsp(pos, new Color(255, 215, 0, 100), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 15 && Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 15) {
						RenderUtils2.blockEsp(pos, new Color(213, 213, 213, 100), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 129 && Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 129) {
						RenderUtils2.blockEsp(pos, new Color(0, 255, 77, 100), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 73 && Zamorozka.settingsManager.getSettingByName("RedstoneCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 73) {
						RenderUtils2.blockEsp(pos, new Color(255, 0, 0, 100), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 16 && Zamorozka.settingsManager.getSettingByName("CoalCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 16) {
						RenderUtils2.blockEsp(pos, new Color(0, 0, 0, 100), 1, 1);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 21 && Zamorozka.settingsManager.getSettingByName("LapisCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 21) {
						RenderUtils2.blockEsp(pos, new Color(38, 97, 156, 100), 1, 1);
					}
				}
			} else if (mode.equalsIgnoreCase("Frame")) {
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 56 && Zamorozka.settingsManager.getSettingByName("DiamondCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 56) {
						RenderUtils2.blockEspFrame(pos, 0, 255, 255);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 14 && Zamorozka.settingsManager.getSettingByName("GoldCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 14) {
						RenderUtils2.blockEspFrame(pos, 255, 215, 0);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 15 && Zamorozka.settingsManager.getSettingByName("IronCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 15) {
						RenderUtils2.blockEspFrame(pos, 213, 213, 213);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 129 && Zamorozka.settingsManager.getSettingByName("EmeraldCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 129) {
						RenderUtils2.blockEspFrame(pos, 0, 255, 77);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 73 && Zamorozka.settingsManager.getSettingByName("RedstoneCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 73) {
						RenderUtils2.blockEspFrame(pos, 255, 0, 0);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 16 && Zamorozka.settingsManager.getSettingByName("CoalCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 16) {
						RenderUtils2.blockEspFrame(pos, 0, 0, 0);
					}
				}
				if (Block.getIdFromBlock(mat) != 0 && Block.getIdFromBlock(mat) == 21 && Zamorozka.settingsManager.getSettingByName("LapisCheck").getValBoolean()) {
					if (Block.getIdFromBlock(mat) == 21) {
						RenderUtils2.blockEspFrame(pos, 38, 97, 156);
					}
				}
			}
		}
	}

	private ArrayList<BlockPos> getBlocks(int x, int y, int z) {
		BlockPos min = new BlockPos(mc.player.posX - x, mc.player.posY - y, mc.player.posZ - z);
		BlockPos max = new BlockPos(mc.player.posX + x, mc.player.posY + y, mc.player.posZ + z);

		return BlockUtil.getAllInBox(min, max);
	}

}