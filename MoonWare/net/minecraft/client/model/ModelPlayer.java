package net.minecraft.client.model;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.EnumHandSide;
import net.minecraft.util.math.MathHelper;
import org.moonware.client.MoonWare;
import org.moonware.client.feature.impl.visual.CustomModel;
import org.moonware.client.helpers.misc.ClientHelper;
import org.moonware.client.helpers.palette.PaletteHelper;
import org.moonware.client.helpers.render2.RenderHelper2;

import java.awt.*;

public class ModelPlayer
        extends ModelBiped {
    public ModelRenderer bipedLeftArmwear;
    public ModelRenderer bipedRightArmwear;
    public ModelRenderer bipedLeftLegwear;
    public ModelRenderer bipedRightLegwear;
    public ModelRenderer bipedBodyWear;
    private final ModelRenderer bipedCape;
    private final ModelRenderer bipedDeadmau5Head;
    private final boolean smallArms;
    private final ModelRenderer body;
    private ModelRenderer eye;
    private final ModelRenderer left_leg;
    private final ModelRenderer right_leg;
    private final ModelRenderer RightLeg;
    private final ModelRenderer LeftLeg;
    private final ModelRenderer Body;
    private final ModelRenderer RightArm;
    private final ModelRenderer Head;
    private final ModelRenderer LeftArm;
    private final ModelRenderer bone;
    private final ModelRenderer cube_r1;
    private final ModelRenderer cube_r2;
    private final ModelRenderer cube_r3;
    private final ModelRenderer cube_r4;
    private final ModelRenderer head7;
    private final ModelRenderer left_horn;
    private final ModelRenderer right_horn;
    private final ModelRenderer body7;
    private final ModelRenderer left_wing;
    private final ModelRenderer right_wing;
    private final ModelRenderer left_arm7;
    private final ModelRenderer right_arm7;
    private final ModelRenderer left_leg7;
    private final ModelRenderer left_leg1;
    private final ModelRenderer bone2;
    private final ModelRenderer bone3;
    private final ModelRenderer bone7;
    private final ModelRenderer right_leg7;
    private final ModelRenderer right_leg3;
    private final ModelRenderer bone4;
    private final ModelRenderer bone5;
    private final ModelRenderer bone6;
    ModelRenderer head;
    ModelRenderer nose;
    ModelRenderer ear1;
    ModelRenderer ear2;
    ModelRenderer bodyfront;
    ModelRenderer bodyback;
    ModelRenderer leg1;
    ModelRenderer foot1;
    ModelRenderer leg2;
    ModelRenderer foot2;
    ModelRenderer leg3;
    ModelRenderer foot3;
    ModelRenderer leg4;
    ModelRenderer foot4;
    ModelRenderer tail;
    ModelRenderer Back;
    ModelRenderer Nose;
    ModelRenderer RightEar;
    ModelRenderer RightWhiskers;
    ModelRenderer LeftEar;
    ModelRenderer UpperTail;
    ModelRenderer chinBody;
    ModelRenderer RightEye;
    ModelRenderer LowerTail;
    ModelRenderer RightRearFoot;
    ModelRenderer LeftRearFoot;
    ModelRenderer RightFrontLeg;
    ModelRenderer RightFrontFoot;
    ModelRenderer LeftFrontLeg;
    ModelRenderer LeftFrontFoot;
    ModelRenderer Chin;
    ModelRenderer LeftWhiskers;
    ModelRenderer chinHead;
    ModelRenderer LeftEye;
    public ModelRenderer fredbody;
    public ModelRenderer torso;
    public ModelRenderer armRight;
    public ModelRenderer crotch;
    public ModelRenderer legRight;
    public ModelRenderer legLeft;
    public ModelRenderer armLeft;
    public ModelRenderer fredhead;
    public ModelRenderer armRightpad;
    public ModelRenderer armRight2;
    public ModelRenderer armRightpad2;
    public ModelRenderer handRight;
    public ModelRenderer legRightpad;
    public ModelRenderer legRight2;
    public ModelRenderer legRightpad2;
    public ModelRenderer footRight;
    public ModelRenderer legLeftpad;
    public ModelRenderer legLeft2;
    public ModelRenderer legLeftpad2;
    public ModelRenderer footLeft;
    public ModelRenderer armLeftpad;
    public ModelRenderer armLeft2;
    public ModelRenderer armLeftpad2;
    public ModelRenderer handLeft;
    public ModelRenderer jaw;
    public ModelRenderer frednose;
    public ModelRenderer earRight;
    public ModelRenderer earLeft;
    public ModelRenderer hat;
    public ModelRenderer earRightpad;
    public ModelRenderer earRightpad_1;
    public ModelRenderer hat2;
    ModelRenderer Agarrador_2;
    ModelRenderer Agarrador_3;
    ModelRenderer Cuerpo;
    ModelRenderer Pie_3;
    ModelRenderer Agarrador_1;
    ModelRenderer Pantalon_1;
    ModelRenderer Cabeza;
    ModelRenderer Pierna_2;
    ModelRenderer Pitillo_1;
    ModelRenderer Pierna_1;
    ModelRenderer Pitillo_2;
    ModelRenderer Pie_1;
    ModelRenderer Pie_4;
    ModelRenderer Brazo_1;
    ModelRenderer Pie_2;
    ModelRenderer Pantalon_2;
    ModelRenderer Pantalon_3;
    ModelRenderer Brazo_2;
    ModelRenderer Brazo_3;
    ModelRenderer Brazo_4;
    ModelRenderer Guante_1;
    ModelRenderer Guante_2;
    ModelRenderer Mano_1;
    ModelRenderer Mano_2;
    private final ModelRenderer bb_main;
    private final ModelRenderer Rleg;
    private final ModelRenderer Lleg;
    private final ModelRenderer Larm;
    private final ModelRenderer Rarm;
    private final ModelRenderer sonicHead;
    private final ModelRenderer rabbitBone;
    private final ModelRenderer rabbitRleg;
    private final ModelRenderer rabbitLarm;
    private final ModelRenderer rabbitRarm;
    private final ModelRenderer rabbitLleg;
    private final ModelRenderer rabbitHead;

    public ModelPlayer(float modelSize, boolean smallArmsIn) {
        super(modelSize, 0.0f, 64, 64);
        smallArms = smallArmsIn;
        bipedDeadmau5Head = new ModelRenderer(this, 24, 0);
        bipedDeadmau5Head.addBox(-3.0f, -6.0f, -1.0f, 6, 6, 1, modelSize);
        bipedCape = new ModelRenderer(this, 0, 0);
        bipedCape.setTextureSize(64, 32);
        bipedCape.addBox(-5.0f, 0.0f, -1.0f, 10, 16, 1, modelSize);
        if (smallArmsIn) {
            bipedLeftArm = new ModelRenderer(this, 32, 48);
            bipedLeftArm.addBox(-1.0f, -2.0f, -2.0f, 3, 12, 4, modelSize);
            bipedLeftArm.setRotationPoint(5.0f, 2.5f, 0.0f);
            bipedRightArm = new ModelRenderer(this, 40, 16);
            bipedRightArm.addBox(-2.0f, -2.0f, -2.0f, 3, 12, 4, modelSize);
            bipedRightArm.setRotationPoint(-5.0f, 2.5f, 0.0f);
            bipedLeftArmwear = new ModelRenderer(this, 48, 48);
            bipedLeftArmwear.addBox(-1.0f, -2.0f, -2.0f, 3, 12, 4, modelSize + 0.25f);
            bipedLeftArmwear.setRotationPoint(5.0f, 2.5f, 0.0f);
            bipedRightArmwear = new ModelRenderer(this, 40, 32);
            bipedRightArmwear.addBox(-2.0f, -2.0f, -2.0f, 3, 12, 4, modelSize + 0.25f);
            bipedRightArmwear.setRotationPoint(-5.0f, 2.5f, 10.0f);
        } else {
            bipedLeftArm = new ModelRenderer(this, 32, 48);
            bipedLeftArm.addBox(-1.0f, -2.0f, -2.0f, 4, 12, 4, modelSize);
            bipedLeftArm.setRotationPoint(5.0f, 2.0f, 0.0f);
            bipedLeftArmwear = new ModelRenderer(this, 48, 48);
            bipedLeftArmwear.addBox(-1.0f, -2.0f, -2.0f, 4, 12, 4, modelSize + 0.25f);
            bipedLeftArmwear.setRotationPoint(5.0f, 2.0f, 0.0f);
            bipedRightArmwear = new ModelRenderer(this, 40, 32);
            bipedRightArmwear.addBox(-3.0f, -2.0f, -2.0f, 4, 12, 4, modelSize + 0.25f);
            bipedRightArmwear.setRotationPoint(-5.0f, 2.0f, 10.0f);
        }
        bipedLeftLeg = new ModelRenderer(this, 16, 48);
        bipedLeftLeg.addBox(-2.0f, 0.0f, -2.0f, 4, 12, 4, modelSize);
        bipedLeftLeg.setRotationPoint(1.9f, 12.0f, 0.0f);
        bipedLeftLegwear = new ModelRenderer(this, 0, 48);
        bipedLeftLegwear.addBox(-2.0f, 0.0f, -2.0f, 4, 12, 4, modelSize + 0.25f);
        bipedLeftLegwear.setRotationPoint(1.9f, 12.0f, 0.0f);
        bipedRightLegwear = new ModelRenderer(this, 0, 32);
        bipedRightLegwear.addBox(-2.0f, 0.0f, -2.0f, 4, 12, 4, modelSize + 0.25f);
        bipedRightLegwear.setRotationPoint(-1.9f, 12.0f, 0.0f);
        bipedBodyWear = new ModelRenderer(this, 16, 32);
        bipedBodyWear.addBox(-4.0f, 0.0f, -2.0f, 8, 12, 4, modelSize + 0.25f);
        bipedBodyWear.setRotationPoint(0.0f, 0.0f, 0.0f);
        body = new ModelRenderer(this);
        body.setRotationPoint(0.0f, 0.0f, 0.0f);
        body.setTextureOffset(34, 8).addBox(-4.0f, 6.0f, -3.0f, 8, 12, 6);
        body.setTextureOffset(15, 10).addBox(-3.0f, 9.0f, 3.0f, 6, 8, 3);
        body.setTextureOffset(26, 0).addBox(-3.0f, 5.0f, -3.0f, 6, 1, 6);
        eye = new ModelRenderer(this);
        eye.setTextureOffset(0, 10).addBox(-3.0f, 7.0f, -4.0f, 6, 4, 1);
        left_leg = new ModelRenderer(this);
        left_leg.setRotationPoint(-2.0f, 18.0f, 0.0f);
        left_leg.setTextureOffset(0, 0).addBox(2.9f, 0.0f, -1.5f, 3, 6, 3, 0.0f);
        right_leg = new ModelRenderer(this);
        right_leg.setRotationPoint(2.0f, 18.0f, 0.0f);
        right_leg.setTextureOffset(13, 0).addBox(-5.9f, 0.0f, -1.5f, 3, 6, 3);
        RightLeg = new ModelRenderer(this);
        RightLeg.setRotationPoint(-2.0f, 14.0f, 0.0f);
        RightLeg.cubeList.add(new ModelBox(RightLeg, 0, 36, -2.0f, 0.0f, -2.0f, 4, 10, 4, 0.0f, false));
        LeftLeg = new ModelRenderer(this);
        LeftLeg.setRotationPoint(2.0f, 14.0f, 0.0f);
        LeftLeg.cubeList.add(new ModelBox(LeftLeg, 24, 24, -2.0f, 0.0f, -2.0f, 4, 10, 4, 0.0f, false));
        Body = new ModelRenderer(this);
        Body.setRotationPoint(0.0f, 24.0f, 0.0f);
        setRotationAngle(Body, 0.2618f, 0.0f, 0.0f);
        Body.cubeList.add(new ModelBox(Body, 0, 18, -4.0f, -23.1486f, 0.5266f, 8, 14, 4, 0.0f, false));
        RightArm = new ModelRenderer(this);
        RightArm.setRotationPoint(0.0f, 24.0f, 0.0f);
        setRotationAngle(RightArm, -1.309f, 0.0f, 0.0f);
        RightArm.cubeList.add(new ModelBox(RightArm, 36, 0, -7.0f, -4.5f, -23.25f, 3, 12, 3, 0.0f, false));
        RightArm.cubeList.add(new ModelBox(RightArm, 16, 36, -6.0f, 5.75f, -25.25f, 1, 2, 5, 0.0f, false));
        RightArm.cubeList.add(new ModelBox(RightArm, 31, 15, -6.0f, 5.75f, -30.25f, 1, 2, 5, 0.0f, false));
        RightArm.cubeList.add(new ModelBox(RightArm, 0, 0, -6.0f, 8.75f, -28.25f, 1, 1, 3, 0.0f, false));
        RightArm.cubeList.add(new ModelBox(RightArm, 24, 18, -6.0f, 7.75f, -29.25f, 1, 1, 5, 0.0f, false));
        Head = new ModelRenderer(this);
        Head.setRotationPoint(0.0f, 1.0f, -3.0f);
        Head.cubeList.add(new ModelBox(Head, 0, 0, -5.0f, -9.75f, -5.0f, 10, 10, 8, 0.0f, false));
        LeftArm = new ModelRenderer(this);
        LeftArm.setRotationPoint(4.0f, 3.0f, -3.0f);
        LeftArm.cubeList.add(new ModelBox(LeftArm, 37, 37, 0.0f, -1.75f, -1.5f, 3, 12, 3, 0.0f, false));
        bone = new ModelRenderer(this);
        bone.setRotationPoint(0.0f, 24.0f, 0.0f);
        bone.setTextureOffset(0, 0).addCube(-8.0f, -12.0f, -6.0f, 16.0f, 7.0f, 12.0f, 0.0f, false);
        bone.setTextureOffset(44, 0).addCube(7.0f, -8.0f, -13.0f, 2.0f, 3.0f, 7.0f, 0.0f, false);
        bone.setTextureOffset(40, 40).addCube(-9.0f, -8.0f, -13.0f, 2.0f, 3.0f, 7.0f, 0.0f, false);
        bone.setTextureOffset(44, 27).addCube(-10.0f, -9.0f, -16.0f, 6.0f, 5.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(44, 19).addCube(4.0f, -9.0f, -16.0f, 6.0f, 5.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(32, 55).addCube(2.0f, -5.0f, -16.0f, 2.0f, 1.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(31, 19).addCube(-4.0f, -5.0f, -16.0f, 2.0f, 1.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(0, 41).addCube(-4.0f, -9.0f, -16.0f, 3.0f, 2.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(20, 39).addCube(1.0f, -9.0f, -16.0f, 3.0f, 2.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(0, 35).addCube(-6.0f, -8.0f, -9.0f, 3.0f, 3.0f, 3.0f, 0.0f, false);
        bone.setTextureOffset(22, 22).addCube(3.0f, -8.0f, -9.0f, 3.0f, 3.0f, 3.0f, 0.0f, false);
        cube_r1 = new ModelRenderer(this);
        cube_r1.setRotationPoint(0.0f, 0.0f, 0.0f);
        bone.addChild(cube_r1);
        setRotationAngle(cube_r1, 0.0f, 0.0f, 0.3491f);
        cube_r1.setTextureOffset(51, 39).addCube(-11.5f, -1.8f, 4.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r1.setTextureOffset(8, 51).addCube(-11.5f, -1.8f, 0.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r1.setTextureOffset(24, 55).addCube(-11.5f, -1.8f, -6.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r1.setTextureOffset(0, 35).addCube(-12.5f, -5.8f, -6.0f, 4.0f, 4.0f, 12.0f, 0.0f, false);
        cube_r1.setTextureOffset(22, 23).addCube(3.3f, -13.6f, -6.0f, 5.0f, 4.0f, 12.0f, 0.0f, false);
        cube_r2 = new ModelRenderer(this);
        cube_r2.setRotationPoint(0.0f, 0.0f, 0.0f);
        bone.addChild(cube_r2);
        setRotationAngle(cube_r2, 0.0f, 0.0f, -0.3491f);
        cube_r2.setTextureOffset(52, 52).addCube(9.5f, -1.8f, 4.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r2.setTextureOffset(16, 55).addCube(9.5f, -1.8f, 0.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r2.setTextureOffset(0, 51).addCube(9.5f, -1.8f, -6.0f, 2.0f, 6.0f, 2.0f, 0.0f, false);
        cube_r2.setTextureOffset(20, 39).addCube(8.5f, -5.8f, -6.0f, 4.0f, 4.0f, 12.0f, 0.0f, false);
        cube_r2.setTextureOffset(0, 19).addCube(-8.3f, -13.6f, -6.0f, 5.0f, 4.0f, 12.0f, 0.0f, false);
        cube_r3 = new ModelRenderer(this);
        cube_r3.setRotationPoint(0.0f, 0.0f, 0.0f);
        bone.addChild(cube_r3);
        setRotationAngle(cube_r3, 0.0f, 0.0f, 0.1309f);
        cube_r3.setTextureOffset(0, 0).addCube(1.3f, -18.0f, -6.7f, 3.0f, 6.0f, 3.0f, 0.0f, false);
        cube_r4 = new ModelRenderer(this);
        cube_r4.setRotationPoint(0.0f, 0.0f, 0.0f);
        bone.addChild(cube_r4);
        setRotationAngle(cube_r4, 0.0f, 0.0f, -0.1309f);
        cube_r4.setTextureOffset(0, 19).addCube(-4.3f, -18.0f, -6.7f, 3.0f, 6.0f, 3.0f, 0.0f, false);
        head7 = new ModelRenderer(this);
        head7.setRotationPoint(0.0f, -6.0f, -1.0f);
        head7.setTextureOffset(0, 0).addCube(-4.0f, -4.0f, -3.0f, 8.0f, 8.0f, 8.0f, 0.3f, false);
        left_horn = new ModelRenderer(this);
        left_horn.setRotationPoint(-8.0f, 8.0f, 0.0f);
        head7.addChild(left_horn);
        setRotationAngle(left_horn, -0.3927f, 0.3927f, -0.5236f);
        left_horn.setTextureOffset(32, 8).addCube(13.4346f, -5.2071f, 2.7071f, 6.0f, 2.0f, 2.0f, 0.1f, false);
        left_horn.setTextureOffset(0, 0).addCube(17.4346f, -10.4071f, 2.7071f, 2.0f, 5.0f, 2.0f, 0.1f, false);
        right_horn = new ModelRenderer(this);
        right_horn.setRotationPoint(8.0f, 8.0f, 0.0f);
        head7.addChild(right_horn);
        setRotationAngle(right_horn, -0.3927f, -0.3927f, 0.5236f);
        right_horn.setTextureOffset(32, 8).addCube(-19.4346f, -5.2071f, 2.7071f, 6.0f, 2.0f, 2.0f, 0.1f, true);
        right_horn.setTextureOffset(0, 0).addCube(-19.4346f, -10.4071f, 2.7071f, 2.0f, 5.0f, 2.0f, 0.1f, true);
        body7 = new ModelRenderer(this);
        body7.setRotationPoint(0.5f, -0.1f, -3.5f);
        setRotationAngle(body7, 0.1745f, 0.0f, 0.0f);
        body7.setTextureOffset(0, 16).addCube(-4.5f, -1.7028f, 1.4696f, 8.0f, 12.0f, 4.0f, 0.0f, false);
        left_wing = new ModelRenderer(this);
        left_wing.setRotationPoint(8.25f, -2.0f, 10.0f);
        body7.addChild(left_wing);
        setRotationAngle(left_wing, 0.0873f, -0.829f, 0.1745f);
        left_wing.setTextureOffset(40, 12).addCube(-7.0072f, -0.5972f, 0.7515f, 12.0f, 13.0f, 0.0f, 0.0f, false);
        right_wing = new ModelRenderer(this);
        right_wing.setRotationPoint(-9.25f, -2.0f, 10.0f);
        body7.addChild(right_wing);
        setRotationAngle(right_wing, 0.0873f, 0.829f, -0.1745f);
        right_wing.setTextureOffset(40, 12).addCube(-4.9928f, -0.5972f, 0.7515f, 12.0f, 13.0f, 0.0f, 0.0f, true);
        left_arm7 = new ModelRenderer(this);
        left_arm7.setRotationPoint(5.4f, -1.25f, -2.0f);
        setRotationAngle(left_arm7, 0.0f, 0.0f, -0.2182f);
        left_arm7.setTextureOffset(24, 16).addCube(-1.1f, -1.05f, 0.0f, 4.0f, 14.0f, 4.0f, 0.0f, false);
        right_arm7 = new ModelRenderer(this);
        right_arm7.setRotationPoint(-5.4f, -1.25f, -2.0f);
        setRotationAngle(right_arm7, 0.0f, 0.0f, 0.2182f);
        right_arm7.setTextureOffset(24, 16).addCube(-2.9f, -1.05f, 0.0f, 4.0f, 14.0f, 4.0f, 0.0f, true);
        left_leg7 = new ModelRenderer(this);
        left_leg7.setRotationPoint(3.0f, 10.0f, 0.0f);
        left_leg7.setTextureOffset(48, 22).addCube(-3.25f, -2.25f, -1.0f, 4.0f, 9.0f, 4.0f, 0.0f, false);
        left_leg1 = new ModelRenderer(this);
        left_leg1.setRotationPoint(-1.7f, -0.1f, -3.55f);
        left_leg7.addChild(left_leg1);
        setRotationAngle(left_leg1, -0.5236f, 0.0f, 0.0f);
        left_leg1.setTextureOffset(34, 34).addCube(0.95f, 4.6f, 8.0511f, 3.0f, 5.0f, 3.0f, 0.0f, false);
        bone2 = new ModelRenderer(this);
        bone2.setRotationPoint(1.4f, 15.0f, 0.25f);
        left_leg1.addChild(bone2);
        setRotationAngle(bone2, 0.5236f, 0.0f, 0.0f);
        bone2.setTextureOffset(26, 0).addCube(-0.7f, -1.15f, 9.3f, 4.0f, 2.0f, 4.0f, 0.0f, false);
        bone2.setTextureOffset(40, 0).addCube(-0.7f, -1.15f, 7.3f, 4.0f, 2.0f, 2.0f, 0.0f, false);
        bone3 = new ModelRenderer(this);
        bone3.setRotationPoint(-1.0f, 0.0f, -2.0f);
        left_leg1.addChild(bone3);
        setRotationAngle(bone3, 0.0f, -0.0873f, -0.2618f);
        bone7 = new ModelRenderer(this);
        bone7.setRotationPoint(1.9f, 12.0f, 0.25f);
        bone3.addChild(bone7);
        bone7.setTextureOffset(16, 34).addCube(-0.7911f, -10.1159f, 8.0029f, 4.0f, 4.0f, 5.0f, 0.0f, false);
        bone7.setTextureOffset(0, 32).addCube(-0.7911f, -15.1159f, 4.0029f, 4.0f, 9.0f, 4.0f, 0.0f, false);
        right_leg7 = new ModelRenderer(this);
        right_leg7.setRotationPoint(-3.0f, 10.0f, 0.0f);
        right_leg7.setTextureOffset(48, 22).addCube(-0.75f, -2.25f, -1.0f, 4.0f, 9.0f, 4.0f, 0.0f, true);
        right_leg3 = new ModelRenderer(this);
        right_leg3.setRotationPoint(1.7f, -0.1f, -3.55f);
        right_leg7.addChild(right_leg3);
        setRotationAngle(right_leg3, -0.5236f, 0.0f, 0.0f);
        right_leg3.setTextureOffset(34, 34).addCube(-3.95f, 4.6f, 8.0511f, 3.0f, 5.0f, 3.0f, 0.0f, true);
        bone4 = new ModelRenderer(this);
        bone4.setRotationPoint(-1.4f, 15.0f, 0.25f);
        right_leg3.addChild(bone4);
        setRotationAngle(bone4, 0.5236f, 0.0f, 0.0f);
        bone4.setTextureOffset(26, 0).addCube(-3.3f, -1.15f, 9.3f, 4.0f, 2.0f, 4.0f, 0.0f, true);
        bone4.setTextureOffset(40, 0).addCube(-3.3f, -1.15f, 7.3f, 4.0f, 2.0f, 2.0f, 0.0f, true);
        bone5 = new ModelRenderer(this);
        bone5.setRotationPoint(1.0f, 0.0f, -2.0f);
        right_leg3.addChild(bone5);
        setRotationAngle(bone5, 0.0f, 0.0873f, 0.2618f);
        bone6 = new ModelRenderer(this);
        bone6.setRotationPoint(-1.9f, 12.0f, 0.25f);
        bone5.addChild(bone6);
        bone6.setTextureOffset(16, 34).addCube(-3.2089f, -10.1159f, 8.0029f, 4.0f, 4.0f, 5.0f, 0.0f, true);
        bone6.setTextureOffset(0, 32).addCube(-3.2089f, -15.1159f, 4.0029f, 4.0f, 9.0f, 4.0f, 0.0f, true);
        head = new ModelRenderer(this, 29, 5);
        head.addBox(-4.0f, -4.0f, -6.0f, 8, 7, 6);
        head.setRotationPoint(0.0f, 14.0f, -5.0f);
        head.setTextureSize(64, 64);
        head.mirror = true;
        setRotationAngle(head, 0.0f, 0.0f, 0.0f);
        nose = new ModelRenderer(this, 45, 20);
        nose.addBox(-2.0f, -0.5f, -7.5f, 4, 3, 2);
        nose.setRotationPoint(0.0f, 14.0f, -5.0f);
        nose.setTextureSize(64, 64);
        nose.mirror = true;
        setRotationAngle(nose, 0.0f, 0.0f, 0.0f);
        ear1 = new ModelRenderer(this, 45, 27);
        ear1.addBox(1.5f, -6.0f, -4.0f, 4, 4, 2);
        ear1.setRotationPoint(0.0f, 14.0f, -5.0f);
        ear1.setTextureSize(64, 64);
        ear1.mirror = true;
        setRotationAngle(ear1, 0.0f, -0.1745329f, 0.0f);
        ear2 = new ModelRenderer(this, 45, 34);
        ear2.addBox(-5.5f, -6.0f, -4.0f, 4, 4, 2);
        ear2.setRotationPoint(0.0f, 14.0f, -5.0f);
        ear2.setTextureSize(64, 64);
        ear2.mirror = true;
        setRotationAngle(ear2, 0.0f, 0.1745329f, 0.0f);
        bodyfront = new ModelRenderer(this, 2, 45);
        bodyfront.addBox(0.0f, 0.0f, 0.0f, 9, 8, 9);
        bodyfront.setRotationPoint(-4.5f, 11.0f, -6.0f);
        bodyfront.setTextureSize(64, 64);
        bodyfront.mirror = true;
        setRotationAngle(bodyfront, 0.0872665f, 0.0f, 0.0f);
        bodyback = new ModelRenderer(this, 2, 26);
        bodyback.addBox(0.0f, 0.0f, 0.0f, 10, 8, 10);
        bodyback.setRotationPoint(-5.0f, 10.0f, 3.0f);
        bodyback.setTextureSize(64, 64);
        bodyback.mirror = true;
        setRotationAngle(bodyback, -0.0872665f, 0.0f, 0.0f);
        leg1 = new ModelRenderer(this, 44, 50);
        leg1.addBox(0.0f, 0.0f, -2.0f, 4, 8, 4);
        leg1.setRotationPoint(1.0f, 16.0f, -5.0f);
        leg1.setTextureSize(64, 64);
        leg1.mirror = true;
        setRotationAngle(leg1, 0.0f, 0.0f, 0.0f);
        foot1 = new ModelRenderer(this, 47, 43);
        foot1.addBox(0.0f, 6.0f, -3.0f, 4, 2, 1);
        foot1.setRotationPoint(1.0f, 16.0f, -5.0f);
        foot1.setTextureSize(64, 64);
        foot1.mirror = true;
        setRotationAngle(foot1, 0.0f, 0.0f, 0.0f);
        leg2 = new ModelRenderer(this, 44, 50);
        leg2.addBox(-4.0f, 0.0f, -2.0f, 4, 8, 4);
        leg2.setRotationPoint(-1.0f, 16.0f, -5.0f);
        leg2.setTextureSize(64, 64);
        leg2.mirror = true;
        setRotationAngle(leg2, 0.0f, 0.0f, 0.0f);
        foot2 = new ModelRenderer(this, 47, 43);
        foot2.addBox(-4.0f, 6.0f, -3.0f, 4, 2, 1);
        foot2.setRotationPoint(-1.0f, 16.0f, -5.0f);
        foot2.setTextureSize(64, 64);
        foot2.mirror = true;
        setRotationAngle(foot2, 0.0f, 0.0f, 0.0f);
        leg3 = new ModelRenderer(this, 44, 50);
        leg3.addBox(0.0f, 0.0f, -2.0f, 4, 8, 4);
        leg3.setRotationPoint(1.5f, 16.0f, 9.0f);
        leg3.setTextureSize(64, 64);
        leg3.mirror = true;
        setRotationAngle(leg3, 0.0f, 0.0f, 0.0f);
        foot3 = new ModelRenderer(this, 47, 43);
        foot3.addBox(0.0f, 6.0f, -3.0f, 4, 2, 1);
        foot3.setRotationPoint(1.5f, 16.0f, 9.0f);
        foot3.setTextureSize(64, 64);
        foot3.mirror = true;
        setRotationAngle(foot3, 0.0f, 0.0f, 0.0f);
        leg4 = new ModelRenderer(this, 44, 50);
        leg4.addBox(-4.0f, 0.0f, -2.0f, 4, 8, 4);
        leg4.setRotationPoint(-1.5f, 16.0f, 9.0f);
        leg4.setTextureSize(64, 64);
        leg4.mirror = true;
        setRotationAngle(leg4, 0.0f, 0.0f, 0.0f);
        foot4 = new ModelRenderer(this, 47, 43);
        foot4.addBox(-4.0f, 6.0f, -3.0f, 4, 2, 1);
        foot4.setRotationPoint(-1.5f, 16.0f, 9.0f);
        foot4.setTextureSize(64, 64);
        foot4.mirror = true;
        setRotationAngle(foot4, 0.0f, 0.0f, 0.0f);
        tail = new ModelRenderer(this, 2, 3);
        tail.addBox(-2.0f, -2.0f, 0.0f, 4, 5, 17);
        tail.setRotationPoint(0.0f, 14.0f, 11.0f);
        tail.setTextureSize(64, 64);
        tail.mirror = true;
        setRotationAngle(tail, -0.1745329f, 0.0f, 0.0f);
        textureWidth = 64;
        textureHeight = 32;
        Back = new ModelRenderer(this, 0, 14);
        Back.addBox(-3.0f, 0.3f, 3.3f, 6, 6, 3);
        Back.setRotationPoint(0.0f, 18.0f, -2.0f);
        Back.setTextureSize(64, 32);
        Back.mirror = true;
        setRotationAngle(Back, 0.2443461f, 0.0f, 0.0f);
        Nose = new ModelRenderer(this, 46, 24);
        Nose.addBox(-2.0f, -3.0f, -3.0f, 4, 4, 2);
        Nose.setRotationPoint(0.0f, 18.0f, -3.0f);
        Nose.setTextureSize(64, 32);
        Nose.mirror = true;
        setRotationAngle(Nose, 0.3687912f, 0.0f, 0.0f);
        RightEar = new ModelRenderer(this, 48, 8);
        RightEar.addBox(0.5f, -6.0f, -0.6f, 1, 4, 3);
        RightEar.setRotationPoint(0.0f, 18.0f, -3.0f);
        RightEar.setTextureSize(64, 32);
        RightEar.mirror = true;
        setRotationAngle(RightEar, 0.8726646f, 2.094395f, 0.0f);
        RightWhiskers = new ModelRenderer(this, 18, 19);
        RightWhiskers.addBox(-5.0f, -1.4f, -4.04f, 4, 3, 1);
        RightWhiskers.setRotationPoint(0.0f, 18.0f, -3.0f);
        RightWhiskers.setTextureSize(64, 32);
        RightWhiskers.mirror = true;
        setRotationAngle(RightWhiskers, -0.0872665f, 0.1745329f, 0.0f);
        LeftEar = new ModelRenderer(this, 48, 0);
        LeftEar.addBox(0.5f, -6.0f, -2.4f, 1, 4, 3);
        LeftEar.setRotationPoint(0.0f, 18.0f, -3.0f);
        LeftEar.setTextureSize(64, 32);
        LeftEar.mirror = true;
        setRotationAngle(LeftEar, -0.8726646f, 1.047198f, 0.0f);
        UpperTail = new ModelRenderer(this, 14, 23);
        UpperTail.addBox(-1.5f, 1.5f, 2.6f, 3, 3, 4);
        UpperTail.setRotationPoint(0.0f, 22.2f, 4.066667f);
        UpperTail.setTextureSize(64, 32);
        UpperTail.mirror = true;
        setRotationAngle(UpperTail, 0.7330383f, 0.0f, 0.0f);
        chinBody = new ModelRenderer(this, 0, 0);
        chinBody.addBox(-3.5f, -2.0f, -1.0f, 7, 7, 7);
        chinBody.setRotationPoint(0.0f, 18.0f, -2.0f);
        chinBody.setTextureSize(64, 32);
        chinBody.mirror = true;
        setRotationAngle(chinBody, -0.0872665f, 0.0f, 0.0f);
        LowerTail = new ModelRenderer(this, 0, 23);
        LowerTail.addBox(-1.0f, -1.0f, 0.0f, 2, 2, 5);
        LowerTail.setRotationPoint(0.0f, 22.2f, 4.066667f);
        LowerTail.setTextureSize(64, 32);
        LowerTail.mirror = true;
        setRotationAngle(LowerTail, -0.1047198f, 0.0f, 0.0f);
        RightRearFoot = new ModelRenderer(this, 28, 9);
        RightRearFoot.addBox(-1.5f, 0.0f, -3.0f, 2, 1, 4);
        RightRearFoot.setRotationPoint(-3.0f, 23.0f, 3.0f);
        RightRearFoot.setTextureSize(64, 32);
        RightRearFoot.mirror = true;
        setRotationAngle(RightRearFoot, 0.0f, 0.0698132f, 0.0f);
        LeftRearFoot = new ModelRenderer(this, 28, 0);
        LeftRearFoot.addBox(-0.5f, 0.0f, -3.0f, 2, 1, 4);
        LeftRearFoot.setRotationPoint(3.0f, 23.0f, 3.0f);
        LeftRearFoot.setTextureSize(64, 32);
        LeftRearFoot.mirror = true;
        setRotationAngle(LeftRearFoot, 0.0f, -0.0698132f, 0.0f);
        RightFrontLeg = new ModelRenderer(this, 40, 9);
        RightFrontLeg.addBox(-1.0f, 0.0f, -1.0f, 2, 4, 2);
        RightFrontLeg.setRotationPoint(-3.0f, 20.0f, -3.0f);
        RightFrontLeg.setTextureSize(64, 32);
        RightFrontLeg.mirror = true;
        setRotationAngle(RightFrontLeg, -0.1858931f, 0.0f, 0.0f);
        RightFrontFoot = new ModelRenderer(this, 28, 14);
        RightFrontFoot.addBox(-1.0f, 3.0f, -2.8f, 2, 1, 3);
        RightFrontFoot.setRotationPoint(-3.0f, 20.0f, -3.0f);
        RightFrontFoot.setTextureSize(64, 32);
        RightFrontFoot.mirror = true;
        setRotationAngle(RightFrontFoot, 0.0f, -0.0698132f, 0.0f);
        LeftFrontLeg = new ModelRenderer(this, 40, 0);
        LeftFrontLeg.addBox(-1.0f, 0.0f, -1.0f, 2, 4, 2);
        LeftFrontLeg.setRotationPoint(3.0f, 20.0f, -3.0f);
        LeftFrontLeg.setTextureSize(64, 32);
        LeftFrontLeg.mirror = true;
        setRotationAngle(LeftFrontLeg, -0.1858931f, 0.0f, 0.0f);
        LeftFrontFoot = new ModelRenderer(this, 28, 5);
        LeftFrontFoot.addBox(-1.0f, 3.0f, -2.8f, 2, 1, 3);
        LeftFrontFoot.setRotationPoint(3.0f, 20.0f, -3.0f);
        LeftFrontFoot.setTextureSize(64, 32);
        LeftFrontFoot.mirror = true;
        setRotationAngle(LeftFrontFoot, 0.0f, 0.0698132f, 0.0f);
        Chin = new ModelRenderer(this, 46, 18);
        Chin.addBox(-2.0f, -1.3f, -4.04f, 4, 3, 2);
        Chin.setRotationPoint(0.0f, 18.0f, -3.0f);
        Chin.setTextureSize(64, 32);
        Chin.mirror = true;
        setRotationAngle(Chin, -0.1115358f, 0.0f, 0.0f);
        LeftWhiskers = new ModelRenderer(this, 18, 14);
        LeftWhiskers.addBox(1.0f, -1.4f, -4.04f, 4, 3, 1);
        LeftWhiskers.setRotationPoint(0.0f, 18.0f, -3.0f);
        LeftWhiskers.setTextureSize(64, 32);
        LeftWhiskers.mirror = true;
        setRotationAngle(LeftWhiskers, -0.0872665f, -0.1745329f, 0.0f);
        chinHead = new ModelRenderer(this, 28, 21);
        chinHead.addBox(-2.5f, -3.0f, -2.4f, 5, 5, 4);
        chinHead.setRotationPoint(0.0f, 18.0f, -3.0f);
        chinHead.setTextureSize(64, 32);
        chinHead.mirror = true;
        setRotationAngle(chinHead, 0.0f, 0.0f, 0.0f);
        LeftEye = new ModelRenderer(this, 0, 0);
        LeftEye.addBox(-2.0f, -1.8f, -3.4f, 2, 2, 1);
        LeftEye.setRotationPoint(0.0f, 18.0f, -3.0f);
        LeftEye.setTextureSize(64, 32);
        LeftEye.mirror = true;
        setRotationAngle(LeftEye, 0.0f, -1.047198f, 0.0f);
        RightEye = new ModelRenderer(this, 0, 3);
        RightEye.addBox(0.0f, -1.8f, -3.4f, 2, 2, 1);
        RightEye.setRotationPoint(0.0f, 18.0f, -3.0f);
        RightEye.setTextureSize(64, 32);
        RightEye.mirror = true;
        setRotationAngle(RightEye, 0.0f, 1.047198f, 0.0f);
        textureWidth = 64;
        textureHeight = 64;
        rabbitBone = new ModelRenderer(this);
        rabbitBone.setRotationPoint(0.0f, 24.0f, 0.0f);
        rabbitBone.cubeList.add(new ModelBox(rabbitBone, 28, 45, -5.0f, -13.0f, -5.0f, 10, 11, 8, 0.0f, false));
        rabbitRleg = new ModelRenderer(this);
        rabbitRleg.setRotationPoint(-3.0f, -2.0f, -1.0f);
        rabbitBone.addChild(rabbitRleg);
        rabbitRleg.cubeList.add(new ModelBox(rabbitRleg, 0, 0, -2.0f, 0.0f, -2.0f, 4, 2, 4, 0.0f, false));
        rabbitLarm = new ModelRenderer(this);
        rabbitLarm.setRotationPoint(5.0f, -13.0f, -1.0f);
        setRotationAngle(rabbitLarm, 0.0f, 0.0f, -0.0873f);
        rabbitBone.addChild(rabbitLarm);
        rabbitLarm.cubeList.add(new ModelBox(rabbitLarm, 0, 0, 0.0f, 0.0f, -2.0f, 2, 8, 4, 0.0f, false));
        rabbitRarm = new ModelRenderer(this);
        rabbitRarm.setRotationPoint(-5.0f, -13.0f, -1.0f);
        setRotationAngle(rabbitRarm, 0.0f, 0.0f, 0.0873f);
        rabbitBone.addChild(rabbitRarm);
        rabbitRarm.cubeList.add(new ModelBox(rabbitRarm, 0, 0, -2.0f, 0.0f, -2.0f, 2, 8, 4, 0.0f, false));
        rabbitLleg = new ModelRenderer(this);
        rabbitLleg.setRotationPoint(3.0f, -2.0f, -1.0f);
        rabbitBone.addChild(rabbitLleg);
        rabbitLleg.cubeList.add(new ModelBox(rabbitLleg, 0, 0, -2.0f, 0.0f, -2.0f, 4, 2, 4, 0.0f, false));
        rabbitHead = new ModelRenderer(this);
        rabbitHead.setRotationPoint(0.0f, -14.0f, -1.0f);
        rabbitBone.addChild(rabbitHead);
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 0, 0, -3.0f, 0.0f, -4.0f, 6, 1, 6, 0.0f, false));
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 56, 0, -5.0f, -9.0f, -5.0f, 2, 3, 2, 0.0f, false));
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 56, 0, 3.0f, -9.0f, -5.0f, 2, 3, 2, 0.0f, true));
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 0, 45, -4.0f, -11.0f, -4.0f, 8, 11, 8, 0.0f, false));
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 46, 0, 1.0f, -20.0f, 0.0f, 3, 9, 1, 0.0f, false));
        rabbitHead.cubeList.add(new ModelBox(rabbitHead, 46, 0, -4.0f, -20.0f, 0.0f, 3, 9, 1, 0.0f, false));
        textureWidth = 64;
        textureHeight = 64;
        bb_main = new ModelRenderer(this);
        bb_main.setRotationPoint(0.0f, 24.0f, 0.0f);
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -3.0f, -17.0f, -2.0f, 5, 7, 5, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 22, -3.0f, -16.0f, -3.0f, 5, 5, 1, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -3.0f, -16.0f, 3.0f, 5, 5, 1, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, 0.0f, -15.0f, 3.0f, 1, 1, 3, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -3.0f, -14.0f, 4.0f, 1, 1, 2, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -1.0f, -11.0f, 3.0f, 1, 1, 2, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, 0.0f, -14.0f, 6.0f, 1, 1, 1, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -3.0f, -13.0f, 6.0f, 1, 1, 1, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -1.0f, -12.0f, 5.0f, 1, 1, 1, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, -4.0f, -16.0f, -2.0f, 1, 5, 5, 0.0f, false));
        bb_main.cubeList.add(new ModelBox(bb_main, 0, 0, 2.0f, -16.0f, -2.0f, 1, 5, 5, 0.0f, false));
        Rleg = new ModelRenderer(this);
        Rleg.setRotationPoint(-3.0f, 14.0f, 0.5f);
        Rleg.cubeList.add(new ModelBox(Rleg, 53, 54, -1.5f, 7.0f, -1.0f, 2, 1, 2, 0.0f, false));
        Rleg.cubeList.add(new ModelBox(Rleg, 0, 0, -1.0f, -1.0f, -0.5f, 1, 8, 1, 0.0f, false));
        Rleg.cubeList.add(new ModelBox(Rleg, 52, 58, -1.5f, 8.0f, -3.0f, 2, 2, 4, 0.0f, true));
        Rleg.cubeList.add(new ModelBox(Rleg, 52, 58, -2.0f, 9.0f, -2.0f, 0, 1, 1, 0.0f, false));
        Lleg = new ModelRenderer(this);
        Lleg.setRotationPoint(2.0f, 14.0f, 0.5f);
        Lleg.cubeList.add(new ModelBox(Lleg, 53, 54, -0.5f, 7.0f, -1.0f, 2, 1, 2, 0.0f, false));
        Lleg.cubeList.add(new ModelBox(Lleg, 0, 0, 0.0f, -1.0f, -0.5f, 1, 8, 1, 0.0f, false));
        Lleg.cubeList.add(new ModelBox(Lleg, 52, 58, -0.5f, 8.0f, -3.0f, 2, 2, 4, 0.0f, false));
        Lleg.cubeList.add(new ModelBox(Lleg, 52, 58, 1.5f, 9.0f, -2.0f, 0, 1, 1, 0.0f, false));
        Larm = new ModelRenderer(this);
        Larm.setRotationPoint(3.0f, 9.0f, 0.5f);
        setRotationAngle(Larm, 0.0f, 0.0f, -0.0873f);
        Larm.cubeList.add(new ModelBox(Larm, 0, 60, -0.5f, 8.0f, -1.0f, 2, 2, 2, 0.0f, false));
        Larm.cubeList.add(new ModelBox(Larm, 60, 17, 0.0f, 0.0f, -0.5f, 1, 8, 1, 0.0f, false));
        Rarm = new ModelRenderer(this);
        Rarm.setRotationPoint(-4.0f, 9.0f, 0.5f);
        setRotationAngle(Rarm, 0.0f, 0.0f, 0.0873f);
        Rarm.cubeList.add(new ModelBox(Rarm, 60, 17, -1.0f, 0.0f, -0.5f, 1, 8, 1, 0.0f, false));
        Rarm.cubeList.add(new ModelBox(Rarm, 0, 60, -1.5f, 8.0f, -1.0f, 2, 2, 2, 0.0f, false));
        sonicHead = new ModelRenderer(this);
        sonicHead.setRotationPoint(-0.5f, 7.0f, 0.0f);
        sonicHead.cubeList.add(new ModelBox(sonicHead, 36, 3, -3.5f, -7.0f, -3.0f, 7, 7, 7, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 60, 0, -0.5f, -3.0f, -4.0f, 1, 1, 1, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, -3.5f, -4.0f, 6.0f, 3, 3, 3, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, -3.5f, -5.0f, 4.0f, 3, 3, 2, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, 0.5f, -6.0f, 6.0f, 3, 3, 3, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, 0.5f, -7.0f, 4.0f, 3, 3, 2, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, -2.5f, -9.0f, 3.0f, 3, 3, 2, 0.0f, false));
        sonicHead.cubeList.add(new ModelBox(sonicHead, 0, 0, -2.5f, -10.0f, 5.0f, 3, 3, 3, 0.0f, false));
        textureWidth = 128;
        textureHeight = 64;
        Agarrador_2 = new ModelRenderer(this, 29, 10);
        Agarrador_2.addBox(0.0f, 0.0f, 0.0f, 2, 2, 2);
        Agarrador_2.setRotationPoint(-1.0f, 4.0f, -10.0f);
        Agarrador_2.setTextureSize(64, 32);
        Agarrador_2.mirror = true;
        setRotationAngle(Agarrador_2, 0.0f, 0.0f, 0.0f);
        Agarrador_3 = new ModelRenderer(this, 29, 10);
        Agarrador_3.addBox(0.0f, 0.0f, 0.0f, 2, 2, 3);
        Agarrador_3.setRotationPoint(-1.0f, 6.0f, -10.0f);
        Agarrador_3.setTextureSize(64, 32);
        Agarrador_3.mirror = true;
        setRotationAngle(Agarrador_3, 0.0f, 0.0f, 0.0f);
        Cuerpo = new ModelRenderer(this, 43, 40);
        Cuerpo.addBox(0.0f, 0.0f, 0.0f, 4, 4, 3);
        Cuerpo.setRotationPoint(-2.0f, 8.0f, -5.0f);
        Cuerpo.setTextureSize(64, 32);
        Cuerpo.mirror = true;
        setRotationAngle(Cuerpo, 0.0f, 0.0f, 0.0f);
        Pie_3 = new ModelRenderer(this, 0, 0);
        Pie_3.addBox(0.0f, 0.0f, 0.0f, 3, 1, 3);
        Pie_3.setRotationPoint(0.0f, 21.0f, -4.0f);
        Pie_3.setTextureSize(64, 32);
        Pie_3.mirror = true;
        setRotationAngle(Pie_3, 0.0f, 0.1047198f, 0.0f);
        Agarrador_1 = new ModelRenderer(this, 29, 10);
        Agarrador_1.addBox(0.0f, 0.0f, 0.0f, 2, 2, 3);
        Agarrador_1.setRotationPoint(-1.0f, 2.0f, -10.0f);
        Agarrador_1.setTextureSize(64, 32);
        Agarrador_1.mirror = true;
        setRotationAngle(Agarrador_1, 0.0f, 0.0f, 0.0f);
        Pantalon_1 = new ModelRenderer(this, 1, 27);
        Pantalon_1.addBox(0.0f, 0.0f, 0.0f, 2, 2, 2);
        Pantalon_1.setRotationPoint(0.8f, 15.0f, -4.0f);
        Pantalon_1.setTextureSize(64, 32);
        Pantalon_1.mirror = true;
        setRotationAngle(Pantalon_1, 0.0f, 0.0698132f, 0.0f);
        Cabeza = new ModelRenderer(this, 11, 20);
        Cabeza.addBox(0.0f, 0.0f, 0.0f, 8, 7, 8);
        Cabeza.setRotationPoint(-4.0f, 1.0f, -7.0f);
        Cabeza.setTextureSize(64, 32);
        Cabeza.mirror = true;
        setRotationAngle(Cabeza, 0.0f, 0.0f, 0.0f);
        Pierna_2 = new ModelRenderer(this, 30, 0);
        Pierna_2.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Pierna_2.setRotationPoint(-2.3f, 17.0f, -3.3f);
        Pierna_2.setTextureSize(64, 32);
        Pierna_2.mirror = true;
        setRotationAngle(Pierna_2, 0.0f, 0.0f, 0.0f);
        Pitillo_1 = new ModelRenderer(this, 46, 0);
        Pitillo_1.addBox(0.0f, 0.0f, 0.0f, 2, 2, 2);
        Pitillo_1.setRotationPoint(0.0f, -1.0f, -6.0f);
        Pitillo_1.setTextureSize(64, 32);
        Pitillo_1.mirror = true;
        setRotationAngle(Pitillo_1, 0.0f, 0.0f, 0.0f);
        Pierna_1 = new ModelRenderer(this, 30, 0);
        Pierna_1.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Pierna_1.setRotationPoint(1.3f, 17.0f, -3.3f);
        Pierna_1.setTextureSize(64, 32);
        Pierna_1.mirror = true;
        setRotationAngle(Pierna_1, 0.0f, 0.0f, 0.0f);
        Pitillo_2 = new ModelRenderer(this, 54, 0);
        Pitillo_2.addBox(0.0f, 0.0f, 0.0f, 2, 4, 2);
        Pitillo_2.setRotationPoint(0.0f, -1.0f, -8.0f);
        Pitillo_2.setTextureSize(64, 32);
        Pitillo_2.mirror = true;
        setRotationAngle(Pitillo_2, 1.53589f, 0.0f, 0.0f);
        Pie_1 = new ModelRenderer(this, 0, 0);
        Pie_1.addBox(0.0f, 0.0f, 0.0f, 3, 2, 6);
        Pie_1.setRotationPoint(0.0f, 22.0f, -4.0f);
        Pie_1.setTextureSize(64, 32);
        Pie_1.mirror = true;
        setRotationAngle(Pie_1, 0.0f, 0.1047198f, 0.0f);
        Pie_4 = new ModelRenderer(this, 0, 0);
        Pie_4.addBox(0.0f, 0.0f, 0.0f, 3, 1, 3);
        Pie_4.setRotationPoint(-3.0f, 21.0f, -4.0f);
        Pie_4.setTextureSize(64, 32);
        Pie_4.mirror = true;
        setRotationAngle(Pie_4, 0.0f, -0.1047198f, 0.0f);
        Brazo_1 = new ModelRenderer(this, 23, 0);
        Brazo_1.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Brazo_1.setRotationPoint(1.8f, 8.0f, -4.0f);
        Brazo_1.setTextureSize(64, 32);
        Brazo_1.mirror = true;
        setRotationAngle(Brazo_1, 0.0f, 0.0f, -0.7853982f);
        Pie_2 = new ModelRenderer(this, 0, 0);
        Pie_2.addBox(0.0f, 0.0f, 0.0f, 3, 2, 6);
        Pie_2.setRotationPoint(-3.0f, 22.0f, -4.0f);
        Pie_2.setTextureSize(64, 32);
        Pie_2.mirror = true;
        setRotationAngle(Pie_2, 0.0f, -0.1047198f, 0.0f);
        Pantalon_2 = new ModelRenderer(this, 0, 13);
        Pantalon_2.addBox(0.0f, 0.0f, 0.0f, 2, 2, 2);
        Pantalon_2.setRotationPoint(-2.8f, 15.0f, -4.0f);
        Pantalon_2.setTextureSize(64, 32);
        Pantalon_2.mirror = true;
        setRotationAngle(Pantalon_2, 0.0f, 0.0f, 0.0f);
        Pantalon_3 = new ModelRenderer(this, 0, 10);
        Pantalon_3.addBox(0.0f, 0.0f, 0.0f, 6, 3, 4);
        Pantalon_3.setRotationPoint(-3.0f, 12.0f, -5.0f);
        Pantalon_3.setTextureSize(64, 32);
        Pantalon_3.mirror = true;
        setRotationAngle(Pantalon_3, 0.0f, 0.0f, 0.0f);
        Brazo_2 = new ModelRenderer(this, 23, 0);
        Brazo_2.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Brazo_2.setRotationPoint(4.0f, 10.0f, -4.0f);
        Brazo_2.setTextureSize(64, 32);
        Brazo_2.mirror = true;
        setRotationAngle(Brazo_2, 0.0f, 0.0f, -0.0174533f);
        Brazo_3 = new ModelRenderer(this, 23, 0);
        Brazo_3.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Brazo_3.setRotationPoint(-2.0f, 8.0f, -4.0f);
        Brazo_3.setTextureSize(64, 32);
        Brazo_3.mirror = true;
        setRotationAngle(Brazo_3, 0.0f, 0.0f, 0.9773844f);
        Brazo_4 = new ModelRenderer(this, 23, 0);
        Brazo_4.addBox(0.0f, 0.0f, 0.0f, 1, 4, 1);
        Brazo_4.setRotationPoint(-5.0f, 10.0f, -4.0f);
        Brazo_4.setTextureSize(64, 32);
        Brazo_4.mirror = true;
        setRotationAngle(Brazo_4, 0.0f, 0.0f, 0.0698132f);
        Guante_1 = new ModelRenderer(this, 71, 0);
        Guante_1.addBox(0.0f, 0.0f, 0.0f, 3, 1, 3);
        Guante_1.setRotationPoint(3.2f, 14.0f, -5.0f);
        Guante_1.setTextureSize(64, 32);
        Guante_1.mirror = true;
        setRotationAngle(Guante_1, 0.0f, 0.0f, 0.0f);
        Guante_2 = new ModelRenderer(this, 71, 0);
        Guante_2.addBox(0.0f, 0.0f, 0.0f, 3, 1, 3);
        Guante_2.setRotationPoint(-6.4f, 14.0f, -5.0f);
        Guante_2.setTextureSize(64, 32);
        Guante_2.mirror = true;
        setRotationAngle(Guante_2, 0.0f, 0.0f, 0.0f);
        Mano_1 = new ModelRenderer(this, 61, 27);
        Mano_1.addBox(0.0f, 0.0f, 0.0f, 3, 3, 2);
        Mano_1.setRotationPoint(2.866667f, 15.0f, -4.0f);
        Mano_1.setTextureSize(64, 32);
        Mano_1.mirror = true;
        setRotationAngle(Mano_1, 0.0f, 0.3839724f, 0.0f);
        Mano_2 = new ModelRenderer(this, 61, 33);
        Mano_2.addBox(0.0f, 0.0f, 0.0f, 3, 3, 2);
        Mano_2.setRotationPoint(-6.0f, 15.0f, -5.0f);
        Mano_2.setTextureSize(64, 32);
        Mano_2.mirror = true;
        setRotationAngle(Mano_2, 0.0f, -0.3839724f, 0.0f);
        textureWidth = 100;
        textureHeight = 80;
        footRight = new ModelRenderer(this, 22, 39);
        footRight.setRotationPoint(0.0f, 8.0f, 0.0f);
        footRight.addBox(-2.5f, 0.0f, -6.0f, 5, 3, 8, 0.0f);
        setRotationAngle(footRight, (float)(-Math.PI) / 90, 0.0f, 0.0f);
        earRight = new ModelRenderer(this, 8, 0);
        earRight.setRotationPoint(-4.5f, -5.5f, 0.0f);
        earRight.addBox(-1.0f, -3.0f, -0.5f, 2, 3, 1, 0.0f);
        setRotationAngle(earRight, 0.05235988f, 0.0f, -1.0471976f);
        legLeftpad = new ModelRenderer(this, 48, 39);
        legLeftpad.setRotationPoint(0.0f, 0.5f, 0.0f);
        legLeftpad.addBox(-3.0f, 0.0f, -3.0f, 6, 9, 6, 0.0f);
        earRightpad_1 = new ModelRenderer(this, 40, 39);
        earRightpad_1.setRotationPoint(0.0f, -1.0f, 0.0f);
        earRightpad_1.addBox(-2.0f, -5.0f, -1.0f, 4, 4, 2, 0.0f);
        legLeft = new ModelRenderer(this, 54, 10);
        legLeft.setRotationPoint(3.3f, 12.5f, 0.0f);
        legLeft.addBox(-1.0f, 0.0f, -1.0f, 2, 10, 2, 0.0f);
        armRightpad2 = new ModelRenderer(this, 0, 26);
        armRightpad2.setRotationPoint(0.0f, 0.5f, 0.0f);
        armRightpad2.addBox(-2.5f, 0.0f, -2.5f, 5, 7, 5, 0.0f);
        handLeft = new ModelRenderer(this, 58, 56);
        handLeft.setRotationPoint(0.0f, 8.0f, 0.0f);
        handLeft.addBox(-2.0f, 0.0f, -2.5f, 4, 4, 5, 0.0f);
        setRotationAngle(handLeft, 0.0f, 0.0f, 0.05235988f);
        armLeft = new ModelRenderer(this, 62, 10);
        armLeft.setRotationPoint(6.5f, -8.0f, 0.0f);
        armLeft.addBox(-1.0f, 0.0f, -1.0f, 2, 10, 2, 0.0f);
        setRotationAngle(armLeft, 0.0f, 0.0f, -0.2617994f);
        legRight = new ModelRenderer(this, 90, 8);
        legRight.setRotationPoint(-3.3f, 12.5f, 0.0f);
        legRight.addBox(-1.0f, 0.0f, -1.0f, 2, 10, 2, 0.0f);
        armLeft2 = new ModelRenderer(this, 90, 48);
        armLeft2.setRotationPoint(0.0f, 9.6f, 0.0f);
        armLeft2.addBox(-1.0f, 0.0f, -1.0f, 2, 8, 2, 0.0f);
        setRotationAngle(armLeft2, -0.17453292f, 0.0f, 0.0f);
        legRight2 = new ModelRenderer(this, 20, 35);
        legRight2.setRotationPoint(0.0f, 9.6f, 0.0f);
        legRight2.addBox(-1.0f, 0.0f, -1.0f, 2, 8, 2, 0.0f);
        setRotationAngle(legRight2, (float)Math.PI / 90, 0.0f, 0.0f);
        armLeftpad2 = new ModelRenderer(this, 0, 58);
        armLeftpad2.setRotationPoint(0.0f, 0.5f, 0.0f);
        armLeftpad2.addBox(-2.5f, 0.0f, -2.5f, 5, 7, 5, 0.0f);
        legLeft2 = new ModelRenderer(this, 72, 48);
        legLeft2.setRotationPoint(0.0f, 9.6f, 0.0f);
        legLeft2.addBox(-1.0f, 0.0f, -1.0f, 2, 8, 2, 0.0f);
        setRotationAngle(legLeft2, (float)Math.PI / 90, 0.0f, 0.0f);
        hat = new ModelRenderer(this, 70, 24);
        hat.setRotationPoint(0.0f, -8.4f, 0.0f);
        hat.addBox(-3.0f, -0.5f, -3.0f, 6, 1, 6, 0.0f);
        setRotationAngle(hat, (float)(-Math.PI) / 180, 0.0f, 0.0f);
        earRightpad = new ModelRenderer(this, 85, 0);
        earRightpad.setRotationPoint(0.0f, -1.0f, 0.0f);
        earRightpad.addBox(-2.0f, -5.0f, -1.0f, 4, 4, 2, 0.0f);
        crotch = new ModelRenderer(this, 56, 0);
        crotch.setRotationPoint(0.0f, 9.5f, 0.0f);
        crotch.addBox(-5.5f, 0.0f, -3.5f, 11, 3, 7, 0.0f);
        torso = new ModelRenderer(this, 8, 0);
        torso.setRotationPoint(0.0f, 0.0f, 0.0f);
        torso.addBox(-6.0f, -9.0f, -4.0f, 12, 18, 8, 0.0f);
        setRotationAngle(torso, (float)Math.PI / 180, 0.0f, 0.0f);
        armRight2 = new ModelRenderer(this, 90, 20);
        armRight2.setRotationPoint(0.0f, 9.6f, 0.0f);
        armRight2.addBox(-1.0f, 0.0f, -1.0f, 2, 8, 2, 0.0f);
        setRotationAngle(armRight2, -0.17453292f, 0.0f, 0.0f);
        handRight = new ModelRenderer(this, 20, 26);
        handRight.setRotationPoint(0.0f, 8.0f, 0.0f);
        handRight.addBox(-2.0f, 0.0f, -2.5f, 4, 4, 5, 0.0f);
        setRotationAngle(handRight, 0.0f, 0.0f, -0.05235988f);
        fredbody = new ModelRenderer(this, 0, 0);
        fredbody.setRotationPoint(0.0f, -9.0f, 0.0f);
        fredbody.addBox(-1.0f, -14.0f, -1.0f, 2, 24, 2, 0.0f);
        fredhead = new ModelRenderer(this, 39, 22);
        fredhead.setRotationPoint(0.0f, -13.0f, -0.5f);
        fredhead.addBox(-5.5f, -8.0f, -4.5f, 11, 8, 9, 0.0f);
        legRightpad = new ModelRenderer(this, 73, 33);
        legRightpad.setRotationPoint(0.0f, 0.5f, 0.0f);
        legRightpad.addBox(-3.0f, 0.0f, -3.0f, 6, 9, 6, 0.0f);
        frednose = new ModelRenderer(this, 17, 67);
        frednose.setRotationPoint(0.0f, -2.0f, -4.5f);
        frednose.addBox(-4.0f, -2.0f, -3.0f, 8, 4, 3, 0.0f);
        legLeftpad2 = new ModelRenderer(this, 16, 50);
        legLeftpad2.setRotationPoint(0.0f, 0.5f, 0.0f);
        legLeftpad2.addBox(-2.5f, 0.0f, -3.0f, 5, 7, 6, 0.0f);
        armRightpad = new ModelRenderer(this, 70, 10);
        armRightpad.setRotationPoint(0.0f, 0.5f, 0.0f);
        armRightpad.addBox(-2.5f, 0.0f, -2.5f, 5, 9, 5, 0.0f);
        armLeftpad = new ModelRenderer(this, 38, 54);
        armLeftpad.setRotationPoint(0.0f, 0.5f, 0.0f);
        armLeftpad.addBox(-2.5f, 0.0f, -2.5f, 5, 9, 5, 0.0f);
        hat2 = new ModelRenderer(this, 78, 61);
        hat2.setRotationPoint(0.0f, 0.1f, 0.0f);
        hat2.addBox(-2.0f, -4.0f, -2.0f, 4, 4, 4, 0.0f);
        setRotationAngle(hat2, (float)(-Math.PI) / 180, 0.0f, 0.0f);
        legRightpad2 = new ModelRenderer(this, 0, 39);
        legRightpad2.setRotationPoint(0.0f, 0.5f, 0.0f);
        legRightpad2.addBox(-2.5f, 0.0f, -3.0f, 5, 7, 6, 0.0f);
        jaw = new ModelRenderer(this, 49, 65);
        jaw.setRotationPoint(0.0f, 0.5f, 0.0f);
        jaw.addBox(-5.0f, 0.0f, -4.5f, 10, 3, 9, 0.0f);
        setRotationAngle(jaw, 0.08726646f, 0.0f, 0.0f);
        armRight = new ModelRenderer(this, 48, 0);
        armRight.setRotationPoint(-6.5f, -8.0f, 0.0f);
        armRight.addBox(-1.0f, 0.0f, -1.0f, 2, 10, 2, 0.0f);
        setRotationAngle(armRight, 0.0f, 0.0f, 0.2617994f);
        footLeft = new ModelRenderer(this, 72, 50);
        footLeft.setRotationPoint(0.0f, 8.0f, 0.0f);
        footLeft.addBox(-2.5f, 0.0f, -6.0f, 5, 3, 8, 0.0f);
        setRotationAngle(footLeft, (float)(-Math.PI) / 90, 0.0f, 0.0f);
        earLeft = new ModelRenderer(this, 40, 0);
        earLeft.setRotationPoint(4.5f, -5.5f, 0.0f);
        earLeft.addBox(-1.0f, -3.0f, -0.5f, 2, 3, 1, 0.0f);
        setRotationAngle(earLeft, 0.05235988f, 0.0f, 1.0471976f);
        legRight2.addChild(footRight);
        fredhead.addChild(earRight);
        legLeft.addChild(legLeftpad);
        earLeft.addChild(earRightpad_1);
        fredbody.addChild(legLeft);
        armRight2.addChild(armRightpad2);
        armLeft2.addChild(handLeft);
        fredbody.addChild(armLeft);
        fredbody.addChild(legRight);
        armLeft.addChild(armLeft2);
        legRight.addChild(legRight2);
        armLeft2.addChild(armLeftpad2);
        legLeft.addChild(legLeft2);
        fredhead.addChild(hat);
        earRight.addChild(earRightpad);
        fredbody.addChild(crotch);
        fredbody.addChild(torso);
        armRight.addChild(armRight2);
        armRight2.addChild(handRight);
        fredbody.addChild(fredhead);
        legRight.addChild(legRightpad);
        fredhead.addChild(frednose);
        legLeft2.addChild(legLeftpad2);
        armRight.addChild(armRightpad);
        armLeft.addChild(armLeftpad);
        hat.addChild(hat2);
        legRight2.addChild(legRightpad2);
        fredhead.addChild(jaw);
        fredbody.addChild(armRight);
        legLeft2.addChild(footLeft);
        fredhead.addChild(earLeft);
    }

    @Override
    public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
        GlStateManager.pushMatrix();
        if ((!CustomModel.onlyMe.getCurrentValue() || entityIn == Minecraft.player || MoonWare.friendManager.isFriend(entityIn.getName()) && CustomModel.friends.getCurrentValue()) && !CustomModel.modelMode.currentMode.equals("None") && MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState()) {
            if (CustomModel.modelMode.currentMode.equals("Amogus")) {
                boolean flag = entityIn instanceof EntityLivingBase && ((EntityLivingBase)entityIn).getTicksElytraFlying() > 4;
                bipedHead.rotateAngleY = netHeadYaw * ((float)Math.PI / 180);
                bipedHead.rotateAngleX = flag ? -0.7853982f : headPitch * ((float)Math.PI / 180);
                bipedBody.rotateAngleY = 0.0f;
                bipedRightArm.rotationPointZ = 0.0f;
                bipedRightArm.rotationPointX = -5.0f;
                bipedLeftArm.rotationPointZ = 0.0f;
                bipedLeftArm.rotationPointX = 5.0f;
                float f = 1.0f;
                if (flag) {
                    f = (float)(entityIn.motionX * entityIn.motionX + entityIn.motionY * entityIn.motionY + entityIn.motionZ * entityIn.motionZ);
                    f /= 0.2f;
                    f = f * f * f;
                }
                if (f < 1.0f) {
                    f = 1.0f;
                }
                bipedRightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 2.0f * limbSwingAmount * 0.5f / f;
                bipedLeftArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f / f;
                bipedRightArm.rotateAngleZ = 0.0f;
                bipedLeftArm.rotateAngleZ = 0.0f;
                right_leg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount / f;
                left_leg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 1.4f * limbSwingAmount / f;
                right_leg.rotateAngleY = 0.0f;
                left_leg.rotateAngleY = 0.0f;
                right_leg.rotateAngleZ = 0.0f;
                left_leg.rotateAngleZ = 0.0f;
                int bodyCustomColor = CustomModel.bodyCustomColor.getColor();
                int bodyColor = 0;
                switch (CustomModel.bodyColor.currentMode) {
                    case "Client": {
                        bodyColor = ClientHelper.getClientColor().getRGB();
                        break;
                    }
                    case "Custom": {
                        bodyColor = bodyCustomColor;
                        break;
                    }
                    case "Astolfo": {
                        bodyColor = PaletteHelper.astolfo(5000.0f, 1).getRGB();
                        break;
                    }
                    case "Rainbow": {
                        bodyColor = PaletteHelper.rainbow2(30, 1.0f, 1.0f).getRGB();
                    }
                }
                int eyeCustomColor = CustomModel.eyeCustomColor.getColor();
                int eyeColor = 0;
                switch (CustomModel.eyeColor.currentMode) {
                    case "Client": {
                        eyeColor = ClientHelper.getClientColor().getRGB();
                        break;
                    }
                    case "Custom": {
                        eyeColor = eyeCustomColor;
                        break;
                    }
                    case "Astolfo": {
                        eyeColor = PaletteHelper.astolfo(5000.0f, 1).getRGB();
                        break;
                    }
                    case "Rainbow": {
                        eyeColor = PaletteHelper.rainbow2(30, 1.0f, 1.0f).getRGB();
                    }
                }
                int legsCustomColor = CustomModel.legsCustomColor.getColor();
                int legsColor = 0;
                switch (CustomModel.legsColor.currentMode) {
                    case "Client": {
                        legsColor = ClientHelper.getClientColor().getRGB();
                        break;
                    }
                    case "Custom": {
                        legsColor = legsCustomColor;
                        break;
                    }
                    case "Astolfo": {
                        legsColor = PaletteHelper.astolfo(5000.0f, 1).getRGB();
                        break;
                    }
                    case "Rainbow": {
                        legsColor = PaletteHelper.rainbow2(30, 1.0f, 1.0f).getRGB();
                    }
                }
                if (CustomModel.friendHighlight.getCurrentValue() && MoonWare.friendManager.isFriend(entityIn.getName())) {
                    bodyColor = Color.GREEN.getRGB();
                    eyeColor = Color.WHITE.getRGB();
                    legsColor = Color.GREEN.getRGB();
                }
                if (isChild) {
                    GlStateManager.scale(0.5f, 0.5f, 0.5f);
                    GlStateManager.translate(0.0f, 24.0f * scale, 0.0f);
                    body.render(scale);
                    left_leg.render(scale);
                    right_leg.render(scale);
                } else {
                    GlStateManager.translate(0.0, -0.8, 0.0);
                    GlStateManager.scale(1.8, 1.6, 1.6);
                    RenderHelper2.color(bodyColor);
                    GlStateManager.translate(0.0, 0.15, 0.0);
                    body.render(scale);
                    RenderHelper2.color(eyeColor);
                    eye.render(scale);
                    RenderHelper2.color(legsColor);
                    GlStateManager.translate(0.0, -0.15, 0.0);
                    left_leg.render(scale);
                    right_leg.render(scale);
                    GlStateManager.color(1.0f, 1.0f, 1.0f, 1.0f);
                }
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Jeff Killer")) {
                Head.rotateAngleX = bipedHead.rotateAngleX;
                Head.rotateAngleY = bipedHead.rotateAngleY;
                Head.rotateAngleZ = bipedHead.rotateAngleZ;
                LeftArm.rotateAngleX = bipedLeftArm.rotateAngleX;
                LeftArm.rotateAngleY = bipedLeftArm.rotateAngleY;
                LeftArm.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                RightLeg.rotateAngleX = bipedRightLeg.rotateAngleX;
                RightLeg.rotateAngleY = bipedRightLeg.rotateAngleY;
                RightLeg.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                LeftLeg.rotateAngleX = bipedLeftLeg.rotateAngleX;
                LeftLeg.rotateAngleY = bipedLeftLeg.rotateAngleY;
                LeftLeg.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                RightLeg.render(scale);
                LeftLeg.render(scale);
                Body.render(scale);
                RightArm.render(scale);
                Head.render(scale);
                LeftArm.render(scale);
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Crab")) {
                bone.render(scale);
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Crazy Rabbit")) {
                GlStateManager.pushMatrix();
                GlStateManager.scale(1.25, 1.25, 1.25);
                GlStateManager.translate(0.0, -0.3, 0.0);
                rabbitHead.rotateAngleX = bipedHead.rotateAngleX;
                rabbitHead.rotateAngleY = bipedHead.rotateAngleY;
                rabbitHead.rotateAngleZ = bipedHead.rotateAngleZ;
                rabbitLarm.rotateAngleX = bipedLeftArm.rotateAngleX;
                rabbitLarm.rotateAngleY = bipedLeftArm.rotateAngleY;
                rabbitLarm.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                rabbitRarm.rotateAngleX = bipedRightArm.rotateAngleX;
                rabbitRarm.rotateAngleY = bipedRightArm.rotateAngleY;
                rabbitRarm.rotateAngleZ = bipedRightArm.rotateAngleZ;
                rabbitRleg.rotateAngleX = bipedRightLeg.rotateAngleX;
                rabbitRleg.rotateAngleY = bipedRightLeg.rotateAngleY;
                rabbitRleg.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                rabbitLleg.rotateAngleX = bipedLeftLeg.rotateAngleX;
                rabbitLleg.rotateAngleY = bipedLeftLeg.rotateAngleY;
                rabbitLleg.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                rabbitBone.render(scale);
                GlStateManager.popMatrix();
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Sonic")) {
                GlStateManager.pushMatrix();
                GlStateManager.scale(1.3, 1.3, 1.3);
                GlStateManager.translate(0.0, -0.35, 0.0);
                sonicHead.rotateAngleX = bipedHead.rotateAngleX;
                sonicHead.rotateAngleY = bipedHead.rotateAngleY;
                sonicHead.rotateAngleZ = bipedHead.rotateAngleZ;
                Larm.rotateAngleX = bipedLeftArm.rotateAngleX;
                Larm.rotateAngleY = bipedLeftArm.rotateAngleY;
                Larm.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                Rarm.rotateAngleX = bipedRightArm.rotateAngleX;
                Rarm.rotateAngleY = bipedRightArm.rotateAngleY;
                Rarm.rotateAngleZ = bipedRightArm.rotateAngleZ;
                Rleg.rotateAngleX = bipedRightLeg.rotateAngleX;
                Rleg.rotateAngleY = bipedRightLeg.rotateAngleY;
                Rleg.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                Lleg.rotateAngleX = bipedLeftLeg.rotateAngleX;
                Lleg.rotateAngleY = bipedLeftLeg.rotateAngleY;
                Lleg.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                sonicHead.render(scale);
                bb_main.render(scale);
                Rleg.render(scale);
                Lleg.render(scale);
                Larm.render(scale);
                Rarm.render(scale);
                GlStateManager.popMatrix();
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("CupHead")) {
                GlStateManager.pushMatrix();
                GlStateManager.rotate(180.0f, 0.0f, -1.0f, 0.0f);
                GlStateManager.scale(1.4, 1.4, 1.4);
                GlStateManager.translate(0.0, -0.45, 0.0);
                Agarrador_2.render(scale);
                Agarrador_3.render(scale);
                Cuerpo.render(scale);
                Pie_2.render(scale);
                Pie_3.render(scale);
                Pie_1.render(scale);
                Pie_4.render(scale);
                Agarrador_1.render(scale);
                Pantalon_1.render(scale);
                Cabeza.render(scale);
                Pierna_2.render(scale);
                Pitillo_1.render(scale);
                Pierna_1.render(scale);
                Pitillo_2.render(scale);
                Brazo_1.render(scale);
                Pantalon_2.render(scale);
                Pantalon_3.render(scale);
                Brazo_2.render(scale);
                Brazo_3.render(scale);
                Brazo_4.render(scale);
                Guante_1.render(scale);
                Guante_2.render(scale);
                Mano_1.render(scale);
                Mano_2.render(scale);
                GlStateManager.popMatrix();
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("2D Leon")) {
                GlStateManager.pushMatrix();

                head7.rotateAngleX = bipedHead.rotateAngleX;
                head7.rotateAngleY = bipedHead.rotateAngleY;
                head7.rotateAngleZ = bipedHead.rotateAngleZ;
                right_leg7.rotateAngleX = bipedRightLeg.rotateAngleX;
                right_leg7.rotateAngleY = bipedRightLeg.rotateAngleY;
                right_leg7.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                left_leg7.rotateAngleX = bipedLeftLeg.rotateAngleX;
                left_leg7.rotateAngleY = bipedLeftLeg.rotateAngleY;
                left_leg7.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                left_arm7.rotateAngleX = bipedLeftArm.rotateAngleX;
                left_arm7.rotateAngleY = bipedLeftArm.rotateAngleY;
                left_arm7.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                right_arm7.rotateAngleX = bipedRightArm.rotateAngleX;
                right_arm7.rotateAngleY = bipedRightArm.rotateAngleY;
                right_arm7.rotateAngleZ = bipedRightArm.rotateAngleZ;
                head7.render(scale);
                left_horn.render(scale);
                right_horn.render(scale);
                body7.render(scale);
                left_wing.render(scale);
                right_wing.render(scale);
                left_arm7.render(scale);
                right_arm7.render(scale);
                left_leg7.render(scale);
                right_leg7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                GlStateManager.color(1.0f, 1.0f, 1.0f, 1.0f);
                GlStateManager.popMatrix();
            }else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Freddy Bear")) {
                fredhead.rotateAngleX = bipedHead.rotateAngleX;
                fredhead.rotateAngleY = bipedHead.rotateAngleY;
                fredhead.rotateAngleZ = bipedHead.rotateAngleZ;
                armLeft.rotateAngleX = bipedLeftArm.rotateAngleX;
                armLeft.rotateAngleY = bipedLeftArm.rotateAngleY;
                armLeft.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                legRight.rotateAngleX = bipedRightLeg.rotateAngleX;
                legRight.rotateAngleY = bipedRightLeg.rotateAngleY;
                legRight.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                legLeft.rotateAngleX = bipedLeftLeg.rotateAngleX;
                legLeft.rotateAngleY = bipedLeftLeg.rotateAngleY;
                legLeft.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                armRight.rotateAngleX = bipedRightArm.rotateAngleX;
                armRight.rotateAngleY = bipedRightArm.rotateAngleY;
                armRight.rotateAngleZ = bipedRightArm.rotateAngleZ;
                GlStateManager.pushMatrix();
                GlStateManager.scale(0.75, 0.65, 0.75);
                GlStateManager.translate(0.0, 0.85, 0.0);
                fredbody.render(scale);
                GlStateManager.popMatrix();
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Chinchilla")) {
                GlStateManager.pushMatrix();
                GlStateManager.scale(1.4, 1.4, 1.4);
                GlStateManager.translate(0.0, -0.45, 0.0);
                float f = limbSwing;
                float f1 = limbSwingAmount;
                Chin.rotateAngleY = chinHead.rotateAngleY = netHeadYaw / 57.295776f;
                Nose.rotateAngleY = chinHead.rotateAngleY;
                RightEar.rotateAngleY = chinHead.rotateAngleY + 2.094395f;
                LeftEar.rotateAngleY = chinHead.rotateAngleY + 1.047198f;
                LeftEye.rotateAngleY = chinHead.rotateAngleY - 1.047198f;
                RightEye.rotateAngleY = chinHead.rotateAngleY + 1.047198f;
                LeftFrontLeg.rotateAngleX = MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.3f * f1 - 0.1858931f;
                RightFrontLeg.rotateAngleX = MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.3f * f1 - 0.1858931f;
                LeftFrontFoot.rotateAngleX = MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.3f * f1;
                RightFrontFoot.rotateAngleX = MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.3f * f1;
                LeftRearFoot.rotateAngleX = -MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.1f * f1;
                RightRearFoot.rotateAngleX = -MathHelper.cos(f * 1.2f + (float)Math.PI) * 1.1f * f1;
                LowerTail.rotateAngleX = MathHelper.cos(f * 1.0f + (float)Math.PI) * 0.2f * f1 - 0.1047198f;
                UpperTail.rotateAngleX = MathHelper.cos(f * 1.0f + (float)Math.PI) * 0.2f * f1 + 0.7330383f;
                LeftWhiskers.rotateAngleY = chinHead.rotateAngleY - 0.1745329f;
                RightWhiskers.rotateAngleY = chinHead.rotateAngleY + 0.1745329f;
                Back.render(scale);
                Nose.render(scale);
                RightEar.render(scale);
                RightWhiskers.render(scale);
                LeftEar.render(scale);
                UpperTail.render(scale);
                chinBody.render(scale);
                LowerTail.render(scale);
                RightRearFoot.render(scale);
                LeftRearFoot.render(scale);
                RightFrontLeg.render(scale);
                RightFrontFoot.render(scale);
                LeftFrontLeg.render(scale);
                LeftFrontFoot.render(scale);
                Chin.render(scale);
                LeftWhiskers.render(scale);
                chinHead.render(scale);
                GlStateManager.popMatrix();
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Demon")) {
                RenderHelper2.color(CustomModel.demonColor.getColor());
                head7.rotateAngleX = bipedHead.rotateAngleX;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                head7.rotateAngleY = bipedHead.rotateAngleY;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                head7.rotateAngleZ = bipedHead.rotateAngleZ;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_leg7.rotateAngleX = bipedRightLeg.rotateAngleX;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_leg7.rotateAngleY = bipedRightLeg.rotateAngleY;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_leg7.rotateAngleZ = bipedRightLeg.rotateAngleZ;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_leg7.rotateAngleX = bipedLeftLeg.rotateAngleX;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_leg7.rotateAngleY = bipedLeftLeg.rotateAngleY;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_leg7.rotateAngleZ = bipedLeftLeg.rotateAngleZ;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_arm7.rotateAngleX = bipedLeftArm.rotateAngleX;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_arm7.rotateAngleY = bipedLeftArm.rotateAngleY;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_arm7.rotateAngleZ = bipedLeftArm.rotateAngleZ;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_arm7.rotateAngleX = bipedRightArm.rotateAngleX;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_arm7.rotateAngleY = bipedRightArm.rotateAngleY;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_arm7.rotateAngleZ = bipedRightArm.rotateAngleZ;
                RenderHelper2.color(CustomModel.demonColor.getColor());
                head7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_horn.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_horn.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                body7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_wing.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_wing.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_arm7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_arm7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                left_leg7.render(scale);
                RenderHelper2.color(CustomModel.demonColor.getColor());
                right_leg7.render(scale);
            } else if (MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && CustomModel.modelMode.currentMode.equals("Red Panda")) {
                head.rotateAngleX = bipedHead.rotateAngleX;
                head.rotateAngleY = bipedHead.rotateAngleY;
                head.rotateAngleZ = bipedHead.rotateAngleZ;
                nose.rotateAngleX = bipedHead.rotateAngleX;
                nose.rotateAngleY = bipedHead.rotateAngleY;
                nose.rotateAngleZ = bipedHead.rotateAngleZ;
                ear1.rotateAngleX = bipedHead.rotateAngleX;
                ear1.rotateAngleY = bipedHead.rotateAngleY;
                ear1.rotateAngleZ = bipedHead.rotateAngleZ;
                ear2.rotateAngleX = bipedHead.rotateAngleX;
                ear2.rotateAngleY = bipedHead.rotateAngleY;
                ear2.rotateAngleZ = bipedHead.rotateAngleZ;
                if (entityIn.isSneaking()) {
                    bodyfront.rotateAngleX = -0.0872665f;
                    bodyback.setRotationPoint(-5.0f, 11.5f, 3.0f);
                    bodyback.rotateAngleX = -0.6108652f;
                    tail.setRotationPoint(0.0f, 19.0f, 8.0f);
                    tail.rotateAngleX = -0.0872665f;
                    leg1.rotateAngleX = 0.0f;
                    foot1.rotateAngleX = 0.0f;
                    leg2.rotateAngleX = 0.0f;
                    foot2.rotateAngleX = 0.0f;
                    leg3.setRotationPoint(1.5f, 22.0f, 9.0f);
                    foot3.setRotationPoint(1.5f, 16.0f, 3.0f);
                    leg4.setRotationPoint(-1.5f, 22.0f, 9.0f);
                    foot4.setRotationPoint(-1.5f, 16.0f, 3.0f);
                    leg3.rotateAngleX = -1.570796f;
                    foot3.rotateAngleX = 0.0f;
                    leg4.rotateAngleX = -1.570796f;
                    foot4.rotateAngleX = 0.0f;
                } else {
                    bodyfront.rotateAngleX = 0.0872665f;
                    bodyback.setRotationPoint(-5.0f, 10.0f, 3.0f);
                    bodyback.rotateAngleX = -0.0872665f;
                    tail.setRotationPoint(0.0f, 14.0f, 11.0f);
                    leg3.setRotationPoint(1.5f, 16.0f, 9.0f);
                    foot3.setRotationPoint(1.5f, 16.0f, 9.0f);
                    leg4.setRotationPoint(-1.5f, 16.0f, 9.0f);
                    foot4.setRotationPoint(-1.5f, 16.0f, 9.0f);
                    leg1.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
                    foot1.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
                    leg2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 1.4f * limbSwingAmount;
                    foot2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 1.4f * limbSwingAmount;
                    leg3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
                    foot3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
                    leg4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 1.4f * limbSwingAmount;
                    foot4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + (float)Math.PI) * 1.4f * limbSwingAmount;
                }
                head.render(scale);
                nose.render(scale);
                ear1.render(scale);
                ear2.render(scale);
                bodyfront.render(scale);
                bodyback.render(scale);
                leg1.render(scale);
                foot1.render(scale);
                leg2.render(scale);
                foot2.render(scale);
                leg3.render(scale);
                foot3.render(scale);
                leg4.render(scale);
                foot4.render(scale);
                tail.render(scale);
            }
        } else {
            super.render(entityIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
            if (isChild) {
                float f = 2.0f;
                GlStateManager.scale(0.5f, 0.5f, 0.5f);
                GlStateManager.translate(0.0f, 24.0f * scale, 0.0f);
                bipedLeftLegwear.render(scale);
                bipedRightLegwear.render(scale);
                bipedLeftArmwear.render(scale);
                bipedRightArmwear.render(scale);
                bipedBodyWear.render(scale);
            } else {
                if (entityIn.isSneaking()) {
                    GlStateManager.translate(0.0f, 0.2f, 0.0f);
                }
                bipedLeftLegwear.render(scale);
                bipedRightLegwear.render(scale);
                bipedLeftArmwear.render(scale);
                bipedRightArmwear.render(scale);
                bipedBodyWear.render(scale);
            }
        }
        GlStateManager.popMatrix();
    }

    public void setRotationAngle(ModelRenderer modelRenderer, float x, float y, float z) {
        modelRenderer.rotateAngleX = x;
        modelRenderer.rotateAngleY = y;
        modelRenderer.rotateAngleZ = z;
    }

    public void renderDeadmau5Head(float scale) {
        copyModelAngles(bipedHead, bipedDeadmau5Head);
        bipedDeadmau5Head.rotationPointX = 0.0f;
        bipedDeadmau5Head.rotationPointY = 0.0f;
        bipedDeadmau5Head.render(scale);
    }

    public void renderCape(float scale) {
        if (!(MoonWare.featureManager.getFeatureByClass(CustomModel.class).getState() && (CustomModel.modelMode.currentMode.equals("Werewolf") || CustomModel.modelMode.currentMode.equals("Crazy Rabbit") || CustomModel.modelMode.currentMode.equals("Sonic") || CustomModel.modelMode.currentMode.equals("CupHead") || CustomModel.modelMode.currentMode.equals("Chinchilla") || CustomModel.modelMode.currentMode.equals("Freddy Bear") || CustomModel.modelMode.currentMode.equals("2D Leon") || CustomModel.modelMode.currentMode.equals("Amogus") || CustomModel.modelMode.currentMode.equals("Demon") || CustomModel.modelMode.currentMode.equals("Red Panda") || CustomModel.modelMode.currentMode.equals("Crab") || CustomModel.modelMode.currentMode.equals("Jeff Killer")))) {
            bipedCape.render(scale);
        }
    }

    @Override
    public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, Entity entityIn) {
        super.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, entityIn);
        copyModelAngles(bipedLeftLeg, bipedLeftLegwear);
        copyModelAngles(bipedRightLeg, bipedRightLegwear);
        copyModelAngles(bipedLeftArm, bipedLeftArmwear);
        copyModelAngles(bipedRightArm, bipedRightArmwear);
        copyModelAngles(bipedBody, bipedBodyWear);
    }

    @Override
    public void setInvisible(boolean invisible) {
        super.setInvisible(invisible);
        bipedLeftArmwear.showModel = invisible;
        bipedRightArmwear.showModel = invisible;
        bipedLeftLegwear.showModel = invisible;
        bipedRightLegwear.showModel = invisible;
        bipedBodyWear.showModel = invisible;
        bipedCape.showModel = invisible;
        bipedDeadmau5Head.showModel = invisible;
    }

    @Override
    public void postRenderArm(float scale, EnumHandSide side) {
        ModelRenderer modelrenderer = getArmForSide(side);
        if (smallArms) {
            float f = 0.5f * (float)(side == EnumHandSide.RIGHT ? 1 : -1);
            modelrenderer.rotationPointX += f;
            modelrenderer.postRender(scale);
            modelrenderer.rotationPointX -= f;
        } else {
            modelrenderer.postRender(scale);
        }
    }

    protected float rotlerpRad(float p_205060_1_, float p_205060_2_, float p_205060_3_) {
        float f = (p_205060_2_ - p_205060_1_) % ((float)Math.PI * 2);
        if (f < (float)(-Math.PI)) {
            f += (float)Math.PI * 2;
        }
        if (f >= (float)Math.PI) {
            f -= (float)Math.PI * 2;
        }
        return p_205060_1_ + p_205060_3_ * f;
    }
}
