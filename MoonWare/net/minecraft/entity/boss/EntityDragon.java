package net.minecraft.entity.boss;

import java.util.List;
import javax.annotation.Nullable;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.IEntityMultiPart;
import net.minecraft.entity.MoverType;
import net.minecraft.entity.MultiPartEntityPart;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.boss.dragon.phase.IPhase;
import net.minecraft.entity.boss.dragon.phase.PhaseList;
import net.minecraft.entity.boss.dragon.phase.PhaseManager;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.entity.monster.IMob;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.SoundEvents;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;
import net.minecraft.pathfinding.Path;
import net.minecraft.pathfinding.PathHeap;
import net.minecraft.pathfinding.PathPoint;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.DamageSource;
import net.minecraft.util.EntityDamageSource;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.Namespaced;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.datafix.DataFixer;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;
import net.minecraft.world.WorldProviderEnd;
import net.minecraft.world.end.DragonFightManager;
import net.minecraft.world.gen.feature.WorldGenEndPodium;
import net.minecraft.world.storage.loot.LootTableList;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class EntityDragon extends EntityLiving implements IEntityMultiPart, IMob
{
    private static final Logger LOGGER = LogManager.getLogger();
    public static final DataParameter<Integer> PHASE = EntityDataManager.createKey(EntityDragon.class, DataSerializers.VARINT);

    /**
     * Ring buffer array for the last 64 Y-positions and yaw rotations. Used to calculate offsets for the animations.
     */
    public double[][] ringBuffer = new double[64][3];

    /**
     * Index into the ring buffer. Incremented once per tick and restarts at 0 once it reaches the end of the buffer.
     */
    public int ringBufferIndex = -1;

    /** An array containing all body parts of this dragon */
    public MultiPartEntityPart[] dragonPartArray;

    /** The head bounding box of a dragon */
    public MultiPartEntityPart dragonPartHead = new MultiPartEntityPart(this, "head", 6.0F, 6.0F);
    public MultiPartEntityPart dragonPartNeck = new MultiPartEntityPart(this, "neck", 6.0F, 6.0F);

    /** The body bounding box of a dragon */
    public MultiPartEntityPart dragonPartBody = new MultiPartEntityPart(this, "body", 8.0F, 8.0F);
    public MultiPartEntityPart dragonPartTail1 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
    public MultiPartEntityPart dragonPartTail2 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
    public MultiPartEntityPart dragonPartTail3 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
    public MultiPartEntityPart dragonPartWing1 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);
    public MultiPartEntityPart dragonPartWing2 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);

    /** Animation time at previous tick. */
    public float prevAnimTime;

    /**
     * Animation time, used to control the speed of the animation cycles (wings flapping, jaw opening, etc.)
     */
    public float animTime;

    /**
     * Activated if the dragon is flying though obsidian, white stone or bedrock. Slows movement and animation speed.
     */
    public boolean slowed;
    public int deathTicks;

    /** The current endercrystal that is healing this dragon */
    public EntityEnderCrystal healingEnderCrystal;

    /** The dragon fight manager */
    private final DragonFightManager fightManager;

    /** The dragon phase manager */
    private final PhaseManager phaseManager;
    private int growlTime = 200;
    private int sittingDamageReceived;

    /**
     * A series of points describing three circles. The first is low to the ground and described by the first 12 points;
     * the next 8 points describe a spiral upwards to the next, tighter circle of just 4 points. Generated by
     * initPathPoints.
     */
    private final PathPoint[] pathPoints = new PathPoint[24];

    /**
     * An array of bitmaps indicating, for each member of pathPoints, which other members should be considered
     * "neighboring" for the purpose of path-finding. The set bits indicate the indexes into pathPoints that should be
     * considered to be candidates for the next step in a path through the circles. Generated by initPathPoints.
     */
    private final int[] neighbors = new int[24];
    private final PathHeap pathFindQueue = new PathHeap();

    public EntityDragon(World worldIn)
    {
        super(worldIn);
        dragonPartArray = new MultiPartEntityPart[] {dragonPartHead, dragonPartNeck, dragonPartBody, dragonPartTail1, dragonPartTail2, dragonPartTail3, dragonPartWing1, dragonPartWing2};
        setHealth(getMaxHealth());
        setSize(16.0F, 8.0F);
        noClip = true;
        isImmuneToFire = true;
        growlTime = 100;
        ignoreFrustumCheck = true;

        if (!worldIn.isRemote && worldIn.provider instanceof WorldProviderEnd)
        {
            fightManager = ((WorldProviderEnd)worldIn.provider).getDragonFightManager();
        }
        else
        {
            fightManager = null;
        }

        phaseManager = new PhaseManager(this);
    }

    protected void applyEntityAttributes()
    {
        super.applyEntityAttributes();
        getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
    }

    protected void entityInit()
    {
        super.entityInit();
        getDataManager().register(PHASE, Integer.valueOf(PhaseList.HOVER.getId()));
    }

    /**
     * Returns a double[3] array with movement offsets, used to calculate trailing tail/neck positions. [0] = yaw
     * offset, [1] = y offset, [2] = unused, always 0. Parameters: buffer index offset, partial ticks.
     */
    public double[] getMovementOffsets(int p_70974_1_, float p_70974_2_)
    {
        if (getHealth() <= 0.0F)
        {
            p_70974_2_ = 0.0F;
        }

        p_70974_2_ = 1.0F - p_70974_2_;
        int i = ringBufferIndex - p_70974_1_ & 63;
        int j = ringBufferIndex - p_70974_1_ - 1 & 63;
        double[] adouble = new double[3];
        double d0 = ringBuffer[i][0];
        double d1 = MathHelper.wrapDegrees(ringBuffer[j][0] - d0);
        adouble[0] = d0 + d1 * (double)p_70974_2_;
        d0 = ringBuffer[i][1];
        d1 = ringBuffer[j][1] - d0;
        adouble[1] = d0 + d1 * (double)p_70974_2_;
        adouble[2] = ringBuffer[i][2] + (ringBuffer[j][2] - ringBuffer[i][2]) * (double)p_70974_2_;
        return adouble;
    }

    /**
     * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
     * use this to react to sunlight and start to burn.
     */
    public void onLivingUpdate()
    {
        if (world.isRemote)
        {
            setHealth(getHealth());

            if (!isSilent())
            {
                float f = MathHelper.cos(animTime * ((float)Math.PI * 2F));
                float f1 = MathHelper.cos(prevAnimTime * ((float)Math.PI * 2F));

                if (f1 <= -0.3F && f >= -0.3F)
                {
                    world.playSound(posX, posY, posZ, SoundEvents.ENTITY_ENDERDRAGON_FLAP, getSoundCategory(), 5.0F, 0.8F + rand.nextFloat() * 0.3F, false);
                }

                if (!phaseManager.getCurrentPhase().getIsStationary() && --growlTime < 0)
                {
                    world.playSound(posX, posY, posZ, SoundEvents.ENTITY_ENDERDRAGON_GROWL, getSoundCategory(), 2.5F, 0.8F + rand.nextFloat() * 0.3F, false);
                    growlTime = 200 + rand.nextInt(200);
                }
            }
        }

        prevAnimTime = animTime;

        if (getHealth() <= 0.0F)
        {
            float f12 = (rand.nextFloat() - 0.5F) * 8.0F;
            float f13 = (rand.nextFloat() - 0.5F) * 4.0F;
            float f15 = (rand.nextFloat() - 0.5F) * 8.0F;
            world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, posX + (double)f12, posY + 2.0D + (double)f13, posZ + (double)f15, 0.0D, 0.0D, 0.0D);
        }
        else
        {
            updateDragonEnderCrystal();
            float f11 = 0.2F / (MathHelper.sqrt(motionX * motionX + motionZ * motionZ) * 10.0F + 1.0F);
            f11 = f11 * (float)Math.pow(2.0D, motionY);

            if (phaseManager.getCurrentPhase().getIsStationary())
            {
                animTime += 0.1F;
            }
            else if (slowed)
            {
                animTime += f11 * 0.5F;
            }
            else
            {
                animTime += f11;
            }

            rotationYaw = MathHelper.wrapDegrees(rotationYaw);

            if (isAIDisabled())
            {
                animTime = 0.5F;
            }
            else
            {
                if (ringBufferIndex < 0)
                {
                    for (int i = 0; i < ringBuffer.length; ++i)
                    {
                        ringBuffer[i][0] = rotationYaw;
                        ringBuffer[i][1] = posY;
                    }
                }

                if (++ringBufferIndex == ringBuffer.length)
                {
                    ringBufferIndex = 0;
                }

                ringBuffer[ringBufferIndex][0] = rotationYaw;
                ringBuffer[ringBufferIndex][1] = posY;

                if (world.isRemote)
                {
                    if (newPosRotationIncrements > 0)
                    {
                        double d5 = posX + (interpTargetX - posX) / (double) newPosRotationIncrements;
                        double d0 = posY + (interpTargetY - posY) / (double) newPosRotationIncrements;
                        double d1 = posZ + (interpTargetZ - posZ) / (double) newPosRotationIncrements;
                        double d2 = MathHelper.wrapDegrees(interpTargetYaw - (double) rotationYaw);
                        rotationYaw = (float)((double) rotationYaw + d2 / (double) newPosRotationIncrements);
                        rotationPitch = (float)((double) rotationPitch + (interpTargetPitch - (double) rotationPitch) / (double) newPosRotationIncrements);
                        --newPosRotationIncrements;
                        setPosition(d5, d0, d1);
                        setRotation(rotationYaw, rotationPitch);
                    }

                    phaseManager.getCurrentPhase().doClientRenderEffects();
                }
                else
                {
                    IPhase iphase = phaseManager.getCurrentPhase();
                    iphase.doLocalUpdate();

                    if (phaseManager.getCurrentPhase() != iphase)
                    {
                        iphase = phaseManager.getCurrentPhase();
                        iphase.doLocalUpdate();
                    }

                    Vec3d vec3d = iphase.getTargetLocation();

                    if (vec3d != null)
                    {
                        double d6 = vec3d.xCoord - posX;
                        double d7 = vec3d.yCoord - posY;
                        double d8 = vec3d.zCoord - posZ;
                        double d3 = d6 * d6 + d7 * d7 + d8 * d8;
                        float f5 = iphase.getMaxRiseOrFall();
                        d7 = MathHelper.clamp(d7 / (double)MathHelper.sqrt(d6 * d6 + d8 * d8), -f5, f5);
                        motionY += d7 * 0.10000000149011612D;
                        rotationYaw = MathHelper.wrapDegrees(rotationYaw);
                        double d4 = MathHelper.clamp(MathHelper.wrapDegrees(180.0D - MathHelper.atan2(d6, d8) * (180D / Math.PI) - (double) rotationYaw), -50.0D, 50.0D);
                        Vec3d vec3d1 = (new Vec3d(vec3d.xCoord - posX, vec3d.yCoord - posY, vec3d.zCoord - posZ)).normalize();
                        Vec3d vec3d2 = (new Vec3d(MathHelper.sin(rotationYaw * 0.017453292F), motionY, -MathHelper.cos(rotationYaw * 0.017453292F))).normalize();
                        float f7 = Math.max(((float)vec3d2.dotProduct(vec3d1) + 0.5F) / 1.5F, 0.0F);
                        randomYawVelocity *= 0.8F;
                        randomYawVelocity = (float)((double) randomYawVelocity + d4 * (double)iphase.getYawFactor());
                        rotationYaw += randomYawVelocity * 0.1F;
                        float f8 = (float)(2.0D / (d3 + 1.0D));
                        float f9 = 0.06F;
                        moveFlying(0.0F, 0.0F, -1.0F, 0.06F * (f7 * f8 + (1.0F - f8)));

                        if (slowed)
                        {
                            moveEntity(MoverType.SELF, motionX * 0.800000011920929D, motionY * 0.800000011920929D, motionZ * 0.800000011920929D);
                        }
                        else
                        {
                            moveEntity(MoverType.SELF, motionX, motionY, motionZ);
                        }

                        Vec3d vec3d3 = (new Vec3d(motionX, motionY, motionZ)).normalize();
                        float f10 = ((float)vec3d3.dotProduct(vec3d2) + 1.0F) / 2.0F;
                        f10 = 0.8F + 0.15F * f10;
                        motionX *= f10;
                        motionZ *= f10;
                        motionY *= 0.9100000262260437D;
                    }
                }

                renderYawOffset = rotationYaw;
                dragonPartHead.width = 1.0F;
                dragonPartHead.height = 1.0F;
                dragonPartNeck.width = 3.0F;
                dragonPartNeck.height = 3.0F;
                dragonPartTail1.width = 2.0F;
                dragonPartTail1.height = 2.0F;
                dragonPartTail2.width = 2.0F;
                dragonPartTail2.height = 2.0F;
                dragonPartTail3.width = 2.0F;
                dragonPartTail3.height = 2.0F;
                dragonPartBody.height = 3.0F;
                dragonPartBody.width = 5.0F;
                dragonPartWing1.height = 2.0F;
                dragonPartWing1.width = 4.0F;
                dragonPartWing2.height = 3.0F;
                dragonPartWing2.width = 4.0F;
                Vec3d[] avec3d = new Vec3d[dragonPartArray.length];

                for (int j = 0; j < dragonPartArray.length; ++j)
                {
                    avec3d[j] = new Vec3d(dragonPartArray[j].posX, dragonPartArray[j].posY, dragonPartArray[j].posZ);
                }

                float f14 = (float)(getMovementOffsets(5, 1.0F)[1] - getMovementOffsets(10, 1.0F)[1]) * 10.0F * 0.017453292F;
                float f16 = MathHelper.cos(f14);
                float f2 = MathHelper.sin(f14);
                float f17 = rotationYaw * 0.017453292F;
                float f3 = MathHelper.sin(f17);
                float f18 = MathHelper.cos(f17);
                dragonPartBody.onUpdate();
                dragonPartBody.setLocationAndAngles(posX + (double)(f3 * 0.5F), posY, posZ - (double)(f18 * 0.5F), 0.0F, 0.0F);
                dragonPartWing1.onUpdate();
                dragonPartWing1.setLocationAndAngles(posX + (double)(f18 * 4.5F), posY + 2.0D, posZ + (double)(f3 * 4.5F), 0.0F, 0.0F);
                dragonPartWing2.onUpdate();
                dragonPartWing2.setLocationAndAngles(posX - (double)(f18 * 4.5F), posY + 2.0D, posZ - (double)(f3 * 4.5F), 0.0F, 0.0F);

                if (!world.isRemote && hurtTime == 0)
                {
                    collideWithEntities(world.getEntitiesWithinAABBExcludingEntity(this, dragonPartWing1.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
                    collideWithEntities(world.getEntitiesWithinAABBExcludingEntity(this, dragonPartWing2.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
                    attackEntitiesInList(world.getEntitiesWithinAABBExcludingEntity(this, dragonPartHead.getEntityBoundingBox().expandXyz(1.0D)));
                    attackEntitiesInList(world.getEntitiesWithinAABBExcludingEntity(this, dragonPartNeck.getEntityBoundingBox().expandXyz(1.0D)));
                }

                double[] adouble = getMovementOffsets(5, 1.0F);
                float f19 = MathHelper.sin(rotationYaw * 0.017453292F - randomYawVelocity * 0.01F);
                float f4 = MathHelper.cos(rotationYaw * 0.017453292F - randomYawVelocity * 0.01F);
                dragonPartHead.onUpdate();
                dragonPartNeck.onUpdate();
                float f20 = getHeadYOffset(1.0F);
                dragonPartHead.setLocationAndAngles(posX + (double)(f19 * 6.5F * f16), posY + (double)f20 + (double)(f2 * 6.5F), posZ - (double)(f4 * 6.5F * f16), 0.0F, 0.0F);
                dragonPartNeck.setLocationAndAngles(posX + (double)(f19 * 5.5F * f16), posY + (double)f20 + (double)(f2 * 5.5F), posZ - (double)(f4 * 5.5F * f16), 0.0F, 0.0F);

                for (int k = 0; k < 3; ++k)
                {
                    MultiPartEntityPart multipartentitypart = null;

                    if (k == 0)
                    {
                        multipartentitypart = dragonPartTail1;
                    }

                    if (k == 1)
                    {
                        multipartentitypart = dragonPartTail2;
                    }

                    if (k == 2)
                    {
                        multipartentitypart = dragonPartTail3;
                    }

                    double[] adouble1 = getMovementOffsets(12 + k * 2, 1.0F);
                    float f21 = rotationYaw * 0.017453292F + simplifyAngle(adouble1[0] - adouble[0]) * 0.017453292F;
                    float f6 = MathHelper.sin(f21);
                    float f22 = MathHelper.cos(f21);
                    float f23 = 1.5F;
                    float f24 = (float)(k + 1) * 2.0F;
                    multipartentitypart.onUpdate();
                    multipartentitypart.setLocationAndAngles(posX - (double)((f3 * 1.5F + f6 * f24) * f16), posY + (adouble1[1] - adouble[1]) - (double)((f24 + 1.5F) * f2) + 1.5D, posZ + (double)((f18 * 1.5F + f22 * f24) * f16), 0.0F, 0.0F);
                }

                if (!world.isRemote)
                {
                    slowed = destroyBlocksInAABB(dragonPartHead.getEntityBoundingBox()) | destroyBlocksInAABB(dragonPartNeck.getEntityBoundingBox()) | destroyBlocksInAABB(dragonPartBody.getEntityBoundingBox());

                    if (fightManager != null)
                    {
                        fightManager.dragonUpdate(this);
                    }
                }

                for (int l = 0; l < dragonPartArray.length; ++l)
                {
                    dragonPartArray[l].prevPosX = avec3d[l].xCoord;
                    dragonPartArray[l].prevPosY = avec3d[l].yCoord;
                    dragonPartArray[l].prevPosZ = avec3d[l].zCoord;
                }
            }
        }
    }

    private float getHeadYOffset(float p_184662_1_)
    {
        double d0;

        if (phaseManager.getCurrentPhase().getIsStationary())
        {
            d0 = -1.0D;
        }
        else
        {
            double[] adouble = getMovementOffsets(5, 1.0F);
            double[] adouble1 = getMovementOffsets(0, 1.0F);
            d0 = adouble[1] - adouble1[1];
        }

        return (float)d0;
    }

    /**
     * Updates the state of the enderdragon's current endercrystal.
     */
    private void updateDragonEnderCrystal()
    {
        if (healingEnderCrystal != null)
        {
            if (healingEnderCrystal.isDead)
            {
                healingEnderCrystal = null;
            }
            else if (ticksExisted % 10 == 0 && getHealth() < getMaxHealth())
            {
                setHealth(getHealth() + 1.0F);
            }
        }

        if (rand.nextInt(10) == 0)
        {
            List<EntityEnderCrystal> list = world.getEntitiesWithinAABB(EntityEnderCrystal.class, getEntityBoundingBox().expandXyz(32.0D));
            EntityEnderCrystal entityendercrystal = null;
            double d0 = Double.MAX_VALUE;

            for (EntityEnderCrystal entityendercrystal1 : list)
            {
                double d1 = entityendercrystal1.getDistanceSqToEntity(this);

                if (d1 < d0)
                {
                    d0 = d1;
                    entityendercrystal = entityendercrystal1;
                }
            }

            healingEnderCrystal = entityendercrystal;
        }
    }

    /**
     * Pushes all entities inside the list away from the enderdragon.
     */
    private void collideWithEntities(List<Entity> p_70970_1_)
    {
        double d0 = (dragonPartBody.getEntityBoundingBox().minX + dragonPartBody.getEntityBoundingBox().maxX) / 2.0D;
        double d1 = (dragonPartBody.getEntityBoundingBox().minZ + dragonPartBody.getEntityBoundingBox().maxZ) / 2.0D;

        for (Entity entity : p_70970_1_)
        {
            if (entity instanceof EntityLivingBase)
            {
                double d2 = entity.posX - d0;
                double d3 = entity.posZ - d1;
                double d4 = d2 * d2 + d3 * d3;
                entity.addVelocity(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);

                if (!phaseManager.getCurrentPhase().getIsStationary() && ((EntityLivingBase)entity).getRevengeTimer() < entity.ticksExisted - 2)
                {
                    entity.attackEntityFrom(DamageSource.causeMobDamage(this), 5.0F);
                    applyEnchantments(this, entity);
                }
            }
        }
    }

    /**
     * Attacks all entities inside this list, dealing 5 hearts of damage.
     */
    private void attackEntitiesInList(List<Entity> p_70971_1_)
    {
        for (int i = 0; i < p_70971_1_.size(); ++i)
        {
            Entity entity = p_70971_1_.get(i);

            if (entity instanceof EntityLivingBase)
            {
                entity.attackEntityFrom(DamageSource.causeMobDamage(this), 10.0F);
                applyEnchantments(this, entity);
            }
        }
    }

    /**
     * Simplifies the value of a number by adding/subtracting 180 to the point that the number is between -180 and 180.
     */
    private float simplifyAngle(double p_70973_1_)
    {
        return (float)MathHelper.wrapDegrees(p_70973_1_);
    }

    /**
     * Destroys all blocks that aren't associated with 'The End' inside the given bounding box.
     */
    private boolean destroyBlocksInAABB(AxisAlignedBB p_70972_1_)
    {
        int i = MathHelper.floor(p_70972_1_.minX);
        int j = MathHelper.floor(p_70972_1_.minY);
        int k = MathHelper.floor(p_70972_1_.minZ);
        int l = MathHelper.floor(p_70972_1_.maxX);
        int i1 = MathHelper.floor(p_70972_1_.maxY);
        int j1 = MathHelper.floor(p_70972_1_.maxZ);
        boolean flag = false;
        boolean flag1 = false;

        for (int k1 = i; k1 <= l; ++k1)
        {
            for (int l1 = j; l1 <= i1; ++l1)
            {
                for (int i2 = k; i2 <= j1; ++i2)
                {
                    BlockPos blockpos = new BlockPos(k1, l1, i2);
                    IBlockState iblockstate = world.getBlockState(blockpos);
                    Block block = iblockstate.getBlock();

                    if (iblockstate.getMaterial() != Material.AIR && iblockstate.getMaterial() != Material.FIRE)
                    {
                        if (!world.getGameRules().getBoolean("mobGriefing"))
                        {
                            flag = true;
                        }
                        else if (block != Blocks.BARRIER && block != Blocks.OBSIDIAN && block != Blocks.END_STONE && block != Blocks.BEDROCK && block != Blocks.END_PORTAL && block != Blocks.END_PORTAL_FRAME)
                        {
                            if (block != Blocks.COMMAND_BLOCK && block != Blocks.REPEATING_COMMAND_BLOCK && block != Blocks.CHAIN_COMMAND_BLOCK && block != Blocks.IRON_BARS && block != Blocks.END_GATEWAY)
                            {
                                flag1 = world.setBlockToAir(blockpos) || flag1;
                            }
                            else
                            {
                                flag = true;
                            }
                        }
                        else
                        {
                            flag = true;
                        }
                    }
                }
            }
        }

        if (flag1)
        {
            double d0 = p_70972_1_.minX + (p_70972_1_.maxX - p_70972_1_.minX) * (double) rand.nextFloat();
            double d1 = p_70972_1_.minY + (p_70972_1_.maxY - p_70972_1_.minY) * (double) rand.nextFloat();
            double d2 = p_70972_1_.minZ + (p_70972_1_.maxZ - p_70972_1_.minZ) * (double) rand.nextFloat();
            world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
        }

        return flag;
    }

    public boolean attackEntityFromPart(MultiPartEntityPart dragonPart, DamageSource source, float damage)
    {
        damage = phaseManager.getCurrentPhase().getAdjustedDamage(dragonPart, source, damage);

        if (dragonPart != dragonPartHead)
        {
            damage = damage / 4.0F + Math.min(damage, 1.0F);
        }

        if (damage < 0.01F)
        {
            return false;
        }
        else
        {
            if (source.getEntity() instanceof EntityPlayer || source.isExplosion())
            {
                float f = getHealth();
                attackDragonFrom(source, damage);

                if (getHealth() <= 0.0F && !phaseManager.getCurrentPhase().getIsStationary())
                {
                    setHealth(1.0F);
                    phaseManager.setPhase(PhaseList.DYING);
                }

                if (phaseManager.getCurrentPhase().getIsStationary())
                {
                    sittingDamageReceived = (int)((float) sittingDamageReceived + (f - getHealth()));

                    if ((float) sittingDamageReceived > 0.25F * getMaxHealth())
                    {
                        sittingDamageReceived = 0;
                        phaseManager.setPhase(PhaseList.TAKEOFF);
                    }
                }
            }

            return true;
        }
    }

    /**
     * Called when the entity is attacked.
     */
    public boolean attackEntityFrom(DamageSource source, float amount)
    {
        if (source instanceof EntityDamageSource && ((EntityDamageSource)source).getIsThornsDamage())
        {
            attackEntityFromPart(dragonPartBody, source, amount);
        }

        return false;
    }

    /**
     * Provides a way to cause damage to an ender dragon.
     */
    protected boolean attackDragonFrom(DamageSource source, float amount)
    {
        return super.attackEntityFrom(source, amount);
    }

    /**
     * Called by the /kill command.
     */
    public void onKillCommand()
    {
        setDead();

        if (fightManager != null)
        {
            fightManager.dragonUpdate(this);
            fightManager.processDragonDeath(this);
        }
    }

    /**
     * handles entity death timer, experience orb and particle creation
     */
    protected void onDeathUpdate()
    {
        if (fightManager != null)
        {
            fightManager.dragonUpdate(this);
        }

        ++deathTicks;

        if (deathTicks >= 180 && deathTicks <= 200)
        {
            float f = (rand.nextFloat() - 0.5F) * 8.0F;
            float f1 = (rand.nextFloat() - 0.5F) * 4.0F;
            float f2 = (rand.nextFloat() - 0.5F) * 8.0F;
            world.spawnParticle(EnumParticleTypes.EXPLOSION_HUGE, posX + (double)f, posY + 2.0D + (double)f1, posZ + (double)f2, 0.0D, 0.0D, 0.0D);
        }

        boolean flag = world.getGameRules().getBoolean("doMobLoot");
        int i = 500;

        if (fightManager != null && !fightManager.hasPreviouslyKilledDragon())
        {
            i = 12000;
        }

        if (!world.isRemote)
        {
            if (deathTicks > 150 && deathTicks % 5 == 0 && flag)
            {
                dropExperience(MathHelper.floor((float)i * 0.08F));
            }

            if (deathTicks == 1)
            {
                world.playBroadcastSound(1028, new BlockPos(this), 0);
            }
        }

        moveEntity(MoverType.SELF, 0.0D, 0.10000000149011612D, 0.0D);
        rotationYaw += 20.0F;
        renderYawOffset = rotationYaw;

        if (deathTicks == 200 && !world.isRemote)
        {
            if (flag)
            {
                dropExperience(MathHelper.floor((float)i * 0.2F));
            }

            if (fightManager != null)
            {
                fightManager.processDragonDeath(this);
            }

            setDead();
        }
    }

    private void dropExperience(int p_184668_1_)
    {
        while (p_184668_1_ > 0)
        {
            int i = EntityXPOrb.getXPSplit(p_184668_1_);
            p_184668_1_ -= i;
            world.spawnEntityInWorld(new EntityXPOrb(world, posX, posY, posZ, i));
        }
    }

    /**
     * Generates values for the fields pathPoints, and neighbors, and then returns the nearest pathPoint to the
     * specified position.
     */
    public int initPathPoints()
    {
        if (pathPoints[0] == null)
        {
            for (int i = 0; i < 24; ++i)
            {
                int j = 5;
                int l;
                int i1;

                if (i < 12)
                {
                    l = (int)(60.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
                    i1 = (int)(60.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
                }
                else if (i < 20)
                {
                    int lvt_3_1_ = i - 12;
                    l = (int)(40.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.3926991F * (float)lvt_3_1_)));
                    i1 = (int)(40.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.3926991F * (float)lvt_3_1_)));
                    j += 10;
                }
                else
                {
                    int k1 = i - 20;
                    l = (int)(20.0F * MathHelper.cos(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)k1)));
                    i1 = (int)(20.0F * MathHelper.sin(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)k1)));
                }

                int j1 = Math.max(world.getSeaLevel() + 10, world.getTopSolidOrLiquidBlock(new BlockPos(l, 0, i1)).getY() + j);
                pathPoints[i] = new PathPoint(l, j1, i1);
            }

            neighbors[0] = 6146;
            neighbors[1] = 8197;
            neighbors[2] = 8202;
            neighbors[3] = 16404;
            neighbors[4] = 32808;
            neighbors[5] = 32848;
            neighbors[6] = 65696;
            neighbors[7] = 131392;
            neighbors[8] = 131712;
            neighbors[9] = 263424;
            neighbors[10] = 526848;
            neighbors[11] = 525313;
            neighbors[12] = 1581057;
            neighbors[13] = 3166214;
            neighbors[14] = 2138120;
            neighbors[15] = 6373424;
            neighbors[16] = 4358208;
            neighbors[17] = 12910976;
            neighbors[18] = 9044480;
            neighbors[19] = 9706496;
            neighbors[20] = 15216640;
            neighbors[21] = 13688832;
            neighbors[22] = 11763712;
            neighbors[23] = 8257536;
        }

        return getNearestPpIdx(posX, posY, posZ);
    }

    /**
     * Returns the index into pathPoints of the nearest PathPoint.
     */
    public int getNearestPpIdx(double x, double y, double z)
    {
        float f = 10000.0F;
        int i = 0;
        PathPoint pathpoint = new PathPoint(MathHelper.floor(x), MathHelper.floor(y), MathHelper.floor(z));
        int j = 0;

        if (fightManager == null || fightManager.getNumAliveCrystals() == 0)
        {
            j = 12;
        }

        for (int k = j; k < 24; ++k)
        {
            if (pathPoints[k] != null)
            {
                float f1 = pathPoints[k].distanceToSquared(pathpoint);

                if (f1 < f)
                {
                    f = f1;
                    i = k;
                }
            }
        }

        return i;
    }

    @Nullable

    /**
     * Find and return a path among the circles described by pathPoints, or null if the shortest path would just be
     * directly between the start and finish with no intermediate points.
     *  
     * Starting with pathPoint[startIdx], it searches the neighboring points (and their neighboring points, and so on)
     * until it reaches pathPoint[finishIdx], at which point it calls makePath to seal the deal.
     */
    public Path findPath(int startIdx, int finishIdx, @Nullable PathPoint andThen)
    {
        for (int i = 0; i < 24; ++i)
        {
            PathPoint pathpoint = pathPoints[i];
            pathpoint.visited = false;
            pathpoint.distanceToTarget = 0.0F;
            pathpoint.totalPathDistance = 0.0F;
            pathpoint.distanceToNext = 0.0F;
            pathpoint.previous = null;
            pathpoint.index = -1;
        }

        PathPoint pathpoint4 = pathPoints[startIdx];
        PathPoint pathpoint5 = pathPoints[finishIdx];
        pathpoint4.totalPathDistance = 0.0F;
        pathpoint4.distanceToNext = pathpoint4.distanceTo(pathpoint5);
        pathpoint4.distanceToTarget = pathpoint4.distanceToNext;
        pathFindQueue.clearPath();
        pathFindQueue.addPoint(pathpoint4);
        PathPoint pathpoint1 = pathpoint4;
        int j = 0;

        if (fightManager == null || fightManager.getNumAliveCrystals() == 0)
        {
            j = 12;
        }

        while (!pathFindQueue.isPathEmpty())
        {
            PathPoint pathpoint2 = pathFindQueue.dequeue();

            if (pathpoint2.equals(pathpoint5))
            {
                if (andThen != null)
                {
                    andThen.previous = pathpoint5;
                    pathpoint5 = andThen;
                }

                return makePath(pathpoint4, pathpoint5);
            }

            if (pathpoint2.distanceTo(pathpoint5) < pathpoint1.distanceTo(pathpoint5))
            {
                pathpoint1 = pathpoint2;
            }

            pathpoint2.visited = true;
            int k = 0;

            for (int l = 0; l < 24; ++l)
            {
                if (pathPoints[l] == pathpoint2)
                {
                    k = l;
                    break;
                }
            }

            for (int i1 = j; i1 < 24; ++i1)
            {
                if ((neighbors[k] & 1 << i1) > 0)
                {
                    PathPoint pathpoint3 = pathPoints[i1];

                    if (!pathpoint3.visited)
                    {
                        float f = pathpoint2.totalPathDistance + pathpoint2.distanceTo(pathpoint3);

                        if (!pathpoint3.isAssigned() || f < pathpoint3.totalPathDistance)
                        {
                            pathpoint3.previous = pathpoint2;
                            pathpoint3.totalPathDistance = f;
                            pathpoint3.distanceToNext = pathpoint3.distanceTo(pathpoint5);

                            if (pathpoint3.isAssigned())
                            {
                                pathFindQueue.changeDistance(pathpoint3, pathpoint3.totalPathDistance + pathpoint3.distanceToNext);
                            }
                            else
                            {
                                pathpoint3.distanceToTarget = pathpoint3.totalPathDistance + pathpoint3.distanceToNext;
                                pathFindQueue.addPoint(pathpoint3);
                            }
                        }
                    }
                }
            }
        }

        if (pathpoint1 == pathpoint4)
        {
            return null;
        }
        else
        {
            LOGGER.debug("Failed to find path from {} to {}", Integer.valueOf(startIdx), Integer.valueOf(finishIdx));

            if (andThen != null)
            {
                andThen.previous = pathpoint1;
                pathpoint1 = andThen;
            }

            return makePath(pathpoint4, pathpoint1);
        }
    }

    /**
     * Create and return a new PathEntity defining a path from the start to the finish, using the connections already
     * made by the caller, findPath.
     */
    private Path makePath(PathPoint start, PathPoint finish)
    {
        int i = 1;

        for (PathPoint pathpoint = finish; pathpoint.previous != null; pathpoint = pathpoint.previous)
        {
            ++i;
        }

        PathPoint[] apathpoint = new PathPoint[i];
        PathPoint pathpoint1 = finish;
        --i;

        for (apathpoint[i] = finish; pathpoint1.previous != null; apathpoint[i] = pathpoint1)
        {
            pathpoint1 = pathpoint1.previous;
            --i;
        }

        return new Path(apathpoint);
    }

    public static void registerFixesDragon(DataFixer fixer)
    {
        EntityLiving.registerFixesMob(fixer, EntityDragon.class);
    }

    /**
     * (abstract) Protected helper method to write subclass entity data to NBT.
     */
    public void writeEntityToNBT(NBTTagCompound compound)
    {
        super.writeEntityToNBT(compound);
        compound.setInteger("DragonPhase", phaseManager.getCurrentPhase().getPhaseList().getId());
    }

    /**
     * (abstract) Protected helper method to read subclass entity data from NBT.
     */
    public void readEntityFromNBT(NBTTagCompound compound)
    {
        super.readEntityFromNBT(compound);

        if (compound.hasKey("DragonPhase"))
        {
            phaseManager.setPhase(PhaseList.getById(compound.getInteger("DragonPhase")));
        }
    }

    /**
     * Makes the entity despawn if requirements are reached
     */
    protected void despawnEntity()
    {
    }

    /**
     * Return the Entity parts making up this Entity (currently only for dragons)
     */
    public Entity[] getParts()
    {
        return dragonPartArray;
    }

    /**
     * Returns true if other Entities should be prevented from moving through this Entity.
     */
    public boolean canBeCollidedWith()
    {
        return false;
    }

    public World getWorld()
    {
        return world;
    }

    public SoundCategory getSoundCategory()
    {
        return SoundCategory.HOSTILE;
    }

    protected SoundEvent getAmbientSound()
    {
        return SoundEvents.ENTITY_ENDERDRAGON_AMBIENT;
    }

    protected SoundEvent getHurtSound(DamageSource p_184601_1_)
    {
        return SoundEvents.ENTITY_ENDERDRAGON_HURT;
    }

    /**
     * Returns the volume for the sounds this mob makes.
     */
    protected float getSoundVolume()
    {
        return 5.0F;
    }

    @Nullable
    protected Namespaced getLootTable()
    {
        return LootTableList.field_191189_ay;
    }

    public float getHeadPartYOffset(int p_184667_1_, double[] p_184667_2_, double[] p_184667_3_)
    {
        IPhase iphase = phaseManager.getCurrentPhase();
        PhaseList <? extends IPhase > phaselist = iphase.getPhaseList();
        double d0;

        if (phaselist != PhaseList.LANDING && phaselist != PhaseList.TAKEOFF)
        {
            if (iphase.getIsStationary())
            {
                d0 = p_184667_1_;
            }
            else if (p_184667_1_ == 6)
            {
                d0 = 0.0D;
            }
            else
            {
                d0 = p_184667_3_[1] - p_184667_2_[1];
            }
        }
        else
        {
            BlockPos blockpos = world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
            float f = Math.max(MathHelper.sqrt(getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
            d0 = (float)p_184667_1_ / f;
        }

        return (float)d0;
    }

    public Vec3d getHeadLookVec(float p_184665_1_)
    {
        IPhase iphase = phaseManager.getCurrentPhase();
        PhaseList <? extends IPhase > phaselist = iphase.getPhaseList();
        Vec3d vec3d;

        if (phaselist != PhaseList.LANDING && phaselist != PhaseList.TAKEOFF)
        {
            if (iphase.getIsStationary())
            {
                float f4 = rotationPitch;
                float f5 = 1.5F;
                rotationPitch = -45.0F;
                vec3d = getLook(p_184665_1_);
                rotationPitch = f4;
            }
            else
            {
                vec3d = getLook(p_184665_1_);
            }
        }
        else
        {
            BlockPos blockpos = world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
            float f = Math.max(MathHelper.sqrt(getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
            float f1 = 6.0F / f;
            float f2 = rotationPitch;
            float f3 = 1.5F;
            rotationPitch = -f1 * 1.5F * 5.0F;
            vec3d = getLook(p_184665_1_);
            rotationPitch = f2;
        }

        return vec3d;
    }

    public void onCrystalDestroyed(EntityEnderCrystal crystal, BlockPos pos, DamageSource dmgSrc)
    {
        EntityPlayer entityplayer;

        if (dmgSrc.getEntity() instanceof EntityPlayer)
        {
            entityplayer = (EntityPlayer)dmgSrc.getEntity();
        }
        else
        {
            entityplayer = world.getNearestAttackablePlayer(pos, 64.0D, 64.0D);
        }

        if (crystal == healingEnderCrystal)
        {
            attackEntityFromPart(dragonPartHead, DamageSource.causeExplosionDamage(entityplayer), 10.0F);
        }

        phaseManager.getCurrentPhase().onCrystalDestroyed(crystal, pos, dmgSrc, entityplayer);
    }

    public void notifyDataManagerChange(DataParameter<?> key)
    {
        if (PHASE.equals(key) && world.isRemote)
        {
            phaseManager.setPhase(PhaseList.getById(getDataManager().get(PHASE).intValue()));
        }

        super.notifyDataManagerChange(key);
    }

    public PhaseManager getPhaseManager()
    {
        return phaseManager;
    }

    @Nullable
    public DragonFightManager getFightManager()
    {
        return fightManager;
    }

    /**
     * adds a PotionEffect to the entity
     */
    public void addPotionEffect(PotionEffect potioneffectIn)
    {
    }

    protected boolean canBeRidden(Entity entityIn)
    {
        return false;
    }

    /**
     * Returns false if this Entity is a boss, true otherwise.
     */
    public boolean isNonBoss()
    {
        return false;
    }
}
